// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  address: (where?: AddressWhereInput) => Promise<boolean>;
  authorization: (where?: AuthorizationWhereInput) => Promise<boolean>;
  authorizationDecision: (
    where?: AuthorizationDecisionWhereInput
  ) => Promise<boolean>;
  diagnosisCode: (where?: DiagnosisCodeWhereInput) => Promise<boolean>;
  member: (where?: MemberWhereInput) => Promise<boolean>;
  provider: (where?: ProviderWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  address: (where: AddressWhereUniqueInput) => AddressNullablePromise;
  addresses: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Address>;
  addressesConnection: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AddressConnectionPromise;
  authorization: (
    where: AuthorizationWhereUniqueInput
  ) => AuthorizationNullablePromise;
  authorizations: (args?: {
    where?: AuthorizationWhereInput;
    orderBy?: AuthorizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Authorization>;
  authorizationsConnection: (args?: {
    where?: AuthorizationWhereInput;
    orderBy?: AuthorizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AuthorizationConnectionPromise;
  authorizationDecision: (
    where: AuthorizationDecisionWhereUniqueInput
  ) => AuthorizationDecisionNullablePromise;
  authorizationDecisions: (args?: {
    where?: AuthorizationDecisionWhereInput;
    orderBy?: AuthorizationDecisionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AuthorizationDecision>;
  authorizationDecisionsConnection: (args?: {
    where?: AuthorizationDecisionWhereInput;
    orderBy?: AuthorizationDecisionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AuthorizationDecisionConnectionPromise;
  diagnosisCode: (
    where: DiagnosisCodeWhereUniqueInput
  ) => DiagnosisCodeNullablePromise;
  diagnosisCodes: (args?: {
    where?: DiagnosisCodeWhereInput;
    orderBy?: DiagnosisCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<DiagnosisCode>;
  diagnosisCodesConnection: (args?: {
    where?: DiagnosisCodeWhereInput;
    orderBy?: DiagnosisCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DiagnosisCodeConnectionPromise;
  member: (where: MemberWhereUniqueInput) => MemberNullablePromise;
  members: (args?: {
    where?: MemberWhereInput;
    orderBy?: MemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Member>;
  membersConnection: (args?: {
    where?: MemberWhereInput;
    orderBy?: MemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MemberConnectionPromise;
  provider: (where: ProviderWhereUniqueInput) => ProviderNullablePromise;
  providers: (args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Provider>;
  providersConnection: (args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProviderConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddress: (data: AddressCreateInput) => AddressPromise;
  updateAddress: (args: {
    data: AddressUpdateInput;
    where: AddressWhereUniqueInput;
  }) => AddressPromise;
  updateManyAddresses: (args: {
    data: AddressUpdateManyMutationInput;
    where?: AddressWhereInput;
  }) => BatchPayloadPromise;
  upsertAddress: (args: {
    where: AddressWhereUniqueInput;
    create: AddressCreateInput;
    update: AddressUpdateInput;
  }) => AddressPromise;
  deleteAddress: (where: AddressWhereUniqueInput) => AddressPromise;
  deleteManyAddresses: (where?: AddressWhereInput) => BatchPayloadPromise;
  createAuthorization: (data: AuthorizationCreateInput) => AuthorizationPromise;
  updateAuthorization: (args: {
    data: AuthorizationUpdateInput;
    where: AuthorizationWhereUniqueInput;
  }) => AuthorizationPromise;
  updateManyAuthorizations: (args: {
    data: AuthorizationUpdateManyMutationInput;
    where?: AuthorizationWhereInput;
  }) => BatchPayloadPromise;
  upsertAuthorization: (args: {
    where: AuthorizationWhereUniqueInput;
    create: AuthorizationCreateInput;
    update: AuthorizationUpdateInput;
  }) => AuthorizationPromise;
  deleteAuthorization: (
    where: AuthorizationWhereUniqueInput
  ) => AuthorizationPromise;
  deleteManyAuthorizations: (
    where?: AuthorizationWhereInput
  ) => BatchPayloadPromise;
  createAuthorizationDecision: (
    data: AuthorizationDecisionCreateInput
  ) => AuthorizationDecisionPromise;
  updateAuthorizationDecision: (args: {
    data: AuthorizationDecisionUpdateInput;
    where: AuthorizationDecisionWhereUniqueInput;
  }) => AuthorizationDecisionPromise;
  updateManyAuthorizationDecisions: (args: {
    data: AuthorizationDecisionUpdateManyMutationInput;
    where?: AuthorizationDecisionWhereInput;
  }) => BatchPayloadPromise;
  upsertAuthorizationDecision: (args: {
    where: AuthorizationDecisionWhereUniqueInput;
    create: AuthorizationDecisionCreateInput;
    update: AuthorizationDecisionUpdateInput;
  }) => AuthorizationDecisionPromise;
  deleteAuthorizationDecision: (
    where: AuthorizationDecisionWhereUniqueInput
  ) => AuthorizationDecisionPromise;
  deleteManyAuthorizationDecisions: (
    where?: AuthorizationDecisionWhereInput
  ) => BatchPayloadPromise;
  createDiagnosisCode: (data: DiagnosisCodeCreateInput) => DiagnosisCodePromise;
  updateDiagnosisCode: (args: {
    data: DiagnosisCodeUpdateInput;
    where: DiagnosisCodeWhereUniqueInput;
  }) => DiagnosisCodePromise;
  updateManyDiagnosisCodes: (args: {
    data: DiagnosisCodeUpdateManyMutationInput;
    where?: DiagnosisCodeWhereInput;
  }) => BatchPayloadPromise;
  upsertDiagnosisCode: (args: {
    where: DiagnosisCodeWhereUniqueInput;
    create: DiagnosisCodeCreateInput;
    update: DiagnosisCodeUpdateInput;
  }) => DiagnosisCodePromise;
  deleteDiagnosisCode: (
    where: DiagnosisCodeWhereUniqueInput
  ) => DiagnosisCodePromise;
  deleteManyDiagnosisCodes: (
    where?: DiagnosisCodeWhereInput
  ) => BatchPayloadPromise;
  createMember: (data: MemberCreateInput) => MemberPromise;
  updateMember: (args: {
    data: MemberUpdateInput;
    where: MemberWhereUniqueInput;
  }) => MemberPromise;
  updateManyMembers: (args: {
    data: MemberUpdateManyMutationInput;
    where?: MemberWhereInput;
  }) => BatchPayloadPromise;
  upsertMember: (args: {
    where: MemberWhereUniqueInput;
    create: MemberCreateInput;
    update: MemberUpdateInput;
  }) => MemberPromise;
  deleteMember: (where: MemberWhereUniqueInput) => MemberPromise;
  deleteManyMembers: (where?: MemberWhereInput) => BatchPayloadPromise;
  createProvider: (data: ProviderCreateInput) => ProviderPromise;
  updateProvider: (args: {
    data: ProviderUpdateInput;
    where: ProviderWhereUniqueInput;
  }) => ProviderPromise;
  updateManyProviders: (args: {
    data: ProviderUpdateManyMutationInput;
    where?: ProviderWhereInput;
  }) => BatchPayloadPromise;
  upsertProvider: (args: {
    where: ProviderWhereUniqueInput;
    create: ProviderCreateInput;
    update: ProviderUpdateInput;
  }) => ProviderPromise;
  deleteProvider: (where: ProviderWhereUniqueInput) => ProviderPromise;
  deleteManyProviders: (where?: ProviderWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  address: (
    where?: AddressSubscriptionWhereInput
  ) => AddressSubscriptionPayloadSubscription;
  authorization: (
    where?: AuthorizationSubscriptionWhereInput
  ) => AuthorizationSubscriptionPayloadSubscription;
  authorizationDecision: (
    where?: AuthorizationDecisionSubscriptionWhereInput
  ) => AuthorizationDecisionSubscriptionPayloadSubscription;
  diagnosisCode: (
    where?: DiagnosisCodeSubscriptionWhereInput
  ) => DiagnosisCodeSubscriptionPayloadSubscription;
  member: (
    where?: MemberSubscriptionWhereInput
  ) => MemberSubscriptionPayloadSubscription;
  provider: (
    where?: ProviderSubscriptionWhereInput
  ) => ProviderSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AddressType =
  | "MAIL"
  | "BILLING"
  | "EMERGENCY"
  | "PERMANENT"
  | "PRIMARY";

export type MemberStatus =
  | "INVALID"
  | "NEW"
  | "PENDING"
  | "ENROLLED"
  | "DISENROLLMENT_PENDING"
  | "DISENROLLED";

export type ProviderStatus =
  | "INVALID"
  | "PRACTICING"
  | "ACTIVE"
  | "RETIRED"
  | "DECEASED";

export type AuthorizationType = "INPATIENT" | "OUTPATIENT" | "REFERRAL";

export type AuthorizationStatus =
  | "PENDING"
  | "APPROVED"
  | "REQUESTED_MORE_INFORMATION"
  | "DENIED";

export type AddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "address1_ASC"
  | "address1_DESC"
  | "address2_ASC"
  | "address2_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "country_ASC"
  | "country_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "effectiveStartDate_ASC"
  | "effectiveStartDate_DESC"
  | "effectiveEndDate_ASC"
  | "effectiveEndDate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MemberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "status_ASC"
  | "status_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "birthDate_ASC"
  | "birthDate_DESC"
  | "deathDate_ASC"
  | "deathDate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AuthorizationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DiagnosisCodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC";

export type AuthorizationDecisionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "notes_ASC"
  | "notes_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProviderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AddressWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AddressWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<AddressType>;
  type_not?: Maybe<AddressType>;
  type_in?: Maybe<AddressType[] | AddressType>;
  type_not_in?: Maybe<AddressType[] | AddressType>;
  address1?: Maybe<String>;
  address1_not?: Maybe<String>;
  address1_in?: Maybe<String[] | String>;
  address1_not_in?: Maybe<String[] | String>;
  address1_lt?: Maybe<String>;
  address1_lte?: Maybe<String>;
  address1_gt?: Maybe<String>;
  address1_gte?: Maybe<String>;
  address1_contains?: Maybe<String>;
  address1_not_contains?: Maybe<String>;
  address1_starts_with?: Maybe<String>;
  address1_not_starts_with?: Maybe<String>;
  address1_ends_with?: Maybe<String>;
  address1_not_ends_with?: Maybe<String>;
  address2?: Maybe<String>;
  address2_not?: Maybe<String>;
  address2_in?: Maybe<String[] | String>;
  address2_not_in?: Maybe<String[] | String>;
  address2_lt?: Maybe<String>;
  address2_lte?: Maybe<String>;
  address2_gt?: Maybe<String>;
  address2_gte?: Maybe<String>;
  address2_contains?: Maybe<String>;
  address2_not_contains?: Maybe<String>;
  address2_starts_with?: Maybe<String>;
  address2_not_starts_with?: Maybe<String>;
  address2_ends_with?: Maybe<String>;
  address2_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  zip?: Maybe<String>;
  zip_not?: Maybe<String>;
  zip_in?: Maybe<String[] | String>;
  zip_not_in?: Maybe<String[] | String>;
  zip_lt?: Maybe<String>;
  zip_lte?: Maybe<String>;
  zip_gt?: Maybe<String>;
  zip_gte?: Maybe<String>;
  zip_contains?: Maybe<String>;
  zip_not_contains?: Maybe<String>;
  zip_starts_with?: Maybe<String>;
  zip_not_starts_with?: Maybe<String>;
  zip_ends_with?: Maybe<String>;
  zip_not_ends_with?: Maybe<String>;
  effectiveStartDate?: Maybe<DateTimeInput>;
  effectiveStartDate_not?: Maybe<DateTimeInput>;
  effectiveStartDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  effectiveStartDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  effectiveStartDate_lt?: Maybe<DateTimeInput>;
  effectiveStartDate_lte?: Maybe<DateTimeInput>;
  effectiveStartDate_gt?: Maybe<DateTimeInput>;
  effectiveStartDate_gte?: Maybe<DateTimeInput>;
  effectiveEndDate?: Maybe<DateTimeInput>;
  effectiveEndDate_not?: Maybe<DateTimeInput>;
  effectiveEndDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  effectiveEndDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  effectiveEndDate_lt?: Maybe<DateTimeInput>;
  effectiveEndDate_lte?: Maybe<DateTimeInput>;
  effectiveEndDate_gt?: Maybe<DateTimeInput>;
  effectiveEndDate_gte?: Maybe<DateTimeInput>;
  member?: Maybe<MemberWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  OR?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  NOT?: Maybe<AddressWhereInput[] | AddressWhereInput>;
}

export interface MemberWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  addresses_every?: Maybe<AddressWhereInput>;
  addresses_some?: Maybe<AddressWhereInput>;
  addresses_none?: Maybe<AddressWhereInput>;
  status?: Maybe<MemberStatus>;
  status_not?: Maybe<MemberStatus>;
  status_in?: Maybe<MemberStatus[] | MemberStatus>;
  status_not_in?: Maybe<MemberStatus[] | MemberStatus>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  pcp?: Maybe<ProviderWhereInput>;
  birthDate?: Maybe<DateTimeInput>;
  birthDate_not?: Maybe<DateTimeInput>;
  birthDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthDate_lt?: Maybe<DateTimeInput>;
  birthDate_lte?: Maybe<DateTimeInput>;
  birthDate_gt?: Maybe<DateTimeInput>;
  birthDate_gte?: Maybe<DateTimeInput>;
  deathDate?: Maybe<DateTimeInput>;
  deathDate_not?: Maybe<DateTimeInput>;
  deathDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deathDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deathDate_lt?: Maybe<DateTimeInput>;
  deathDate_lte?: Maybe<DateTimeInput>;
  deathDate_gt?: Maybe<DateTimeInput>;
  deathDate_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MemberWhereInput[] | MemberWhereInput>;
  OR?: Maybe<MemberWhereInput[] | MemberWhereInput>;
  NOT?: Maybe<MemberWhereInput[] | MemberWhereInput>;
}

export interface ProviderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  status?: Maybe<ProviderStatus>;
  status_not?: Maybe<ProviderStatus>;
  status_in?: Maybe<ProviderStatus[] | ProviderStatus>;
  status_not_in?: Maybe<ProviderStatus[] | ProviderStatus>;
  members_every?: Maybe<MemberWhereInput>;
  members_some?: Maybe<MemberWhereInput>;
  members_none?: Maybe<MemberWhereInput>;
  requestingAuthorizations_every?: Maybe<AuthorizationWhereInput>;
  requestingAuthorizations_some?: Maybe<AuthorizationWhereInput>;
  requestingAuthorizations_none?: Maybe<AuthorizationWhereInput>;
  servicingAuthorizations_every?: Maybe<AuthorizationWhereInput>;
  servicingAuthorizations_some?: Maybe<AuthorizationWhereInput>;
  servicingAuthorizations_none?: Maybe<AuthorizationWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProviderWhereInput[] | ProviderWhereInput>;
  OR?: Maybe<ProviderWhereInput[] | ProviderWhereInput>;
  NOT?: Maybe<ProviderWhereInput[] | ProviderWhereInput>;
}

export interface AuthorizationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<AuthorizationType>;
  type_not?: Maybe<AuthorizationType>;
  type_in?: Maybe<AuthorizationType[] | AuthorizationType>;
  type_not_in?: Maybe<AuthorizationType[] | AuthorizationType>;
  status?: Maybe<AuthorizationStatus>;
  status_not?: Maybe<AuthorizationStatus>;
  status_in?: Maybe<AuthorizationStatus[] | AuthorizationStatus>;
  status_not_in?: Maybe<AuthorizationStatus[] | AuthorizationStatus>;
  member?: Maybe<MemberWhereInput>;
  requestingProvider?: Maybe<ProviderWhereInput>;
  servicingProvider?: Maybe<ProviderWhereInput>;
  diagnoses_every?: Maybe<DiagnosisCodeWhereInput>;
  diagnoses_some?: Maybe<DiagnosisCodeWhereInput>;
  diagnoses_none?: Maybe<DiagnosisCodeWhereInput>;
  decisions_every?: Maybe<AuthorizationDecisionWhereInput>;
  decisions_some?: Maybe<AuthorizationDecisionWhereInput>;
  decisions_none?: Maybe<AuthorizationDecisionWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AuthorizationWhereInput[] | AuthorizationWhereInput>;
  OR?: Maybe<AuthorizationWhereInput[] | AuthorizationWhereInput>;
  NOT?: Maybe<AuthorizationWhereInput[] | AuthorizationWhereInput>;
}

export interface DiagnosisCodeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<DiagnosisCodeWhereInput[] | DiagnosisCodeWhereInput>;
  OR?: Maybe<DiagnosisCodeWhereInput[] | DiagnosisCodeWhereInput>;
  NOT?: Maybe<DiagnosisCodeWhereInput[] | DiagnosisCodeWhereInput>;
}

export interface AuthorizationDecisionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  authorization?: Maybe<AuthorizationWhereInput>;
  decidingUser?: Maybe<UserWhereInput>;
  status?: Maybe<AuthorizationStatus>;
  status_not?: Maybe<AuthorizationStatus>;
  status_in?: Maybe<AuthorizationStatus[] | AuthorizationStatus>;
  status_not_in?: Maybe<AuthorizationStatus[] | AuthorizationStatus>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    AuthorizationDecisionWhereInput[] | AuthorizationDecisionWhereInput
  >;
  OR?: Maybe<
    AuthorizationDecisionWhereInput[] | AuthorizationDecisionWhereInput
  >;
  NOT?: Maybe<
    AuthorizationDecisionWhereInput[] | AuthorizationDecisionWhereInput
  >;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type AuthorizationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type AuthorizationDecisionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type DiagnosisCodeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export type MemberWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProviderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AddressCreateInput {
  id?: Maybe<ID_Input>;
  type?: Maybe<AddressType>;
  address1: String;
  address2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  country?: Maybe<String>;
  zip?: Maybe<String>;
  effectiveStartDate?: Maybe<DateTimeInput>;
  effectiveEndDate?: Maybe<DateTimeInput>;
  member: MemberCreateOneWithoutAddressesInput;
}

export interface MemberCreateOneWithoutAddressesInput {
  create?: Maybe<MemberCreateWithoutAddressesInput>;
  connect?: Maybe<MemberWhereUniqueInput>;
}

export interface MemberCreateWithoutAddressesInput {
  id?: Maybe<ID_Input>;
  name: String;
  status?: Maybe<MemberStatus>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  pcp?: Maybe<ProviderCreateOneWithoutMembersInput>;
  birthDate: DateTimeInput;
  deathDate?: Maybe<DateTimeInput>;
}

export interface ProviderCreateOneWithoutMembersInput {
  create?: Maybe<ProviderCreateWithoutMembersInput>;
  connect?: Maybe<ProviderWhereUniqueInput>;
}

export interface ProviderCreateWithoutMembersInput {
  id?: Maybe<ID_Input>;
  name: String;
  status: ProviderStatus;
  requestingAuthorizations?: Maybe<
    AuthorizationCreateManyWithoutRequestingProviderInput
  >;
  servicingAuthorizations?: Maybe<
    AuthorizationCreateManyWithoutServicingProviderInput
  >;
}

export interface AuthorizationCreateManyWithoutRequestingProviderInput {
  create?: Maybe<
    | AuthorizationCreateWithoutRequestingProviderInput[]
    | AuthorizationCreateWithoutRequestingProviderInput
  >;
  connect?: Maybe<
    AuthorizationWhereUniqueInput[] | AuthorizationWhereUniqueInput
  >;
}

export interface AuthorizationCreateWithoutRequestingProviderInput {
  id?: Maybe<ID_Input>;
  type: AuthorizationType;
  status: AuthorizationStatus;
  member: MemberCreateOneInput;
  servicingProvider?: Maybe<
    ProviderCreateOneWithoutServicingAuthorizationsInput
  >;
  diagnoses?: Maybe<DiagnosisCodeCreateManyInput>;
  decisions?: Maybe<AuthorizationDecisionCreateManyWithoutAuthorizationInput>;
}

export interface MemberCreateOneInput {
  create?: Maybe<MemberCreateInput>;
  connect?: Maybe<MemberWhereUniqueInput>;
}

export interface MemberCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  addresses?: Maybe<AddressCreateManyWithoutMemberInput>;
  status?: Maybe<MemberStatus>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  pcp?: Maybe<ProviderCreateOneWithoutMembersInput>;
  birthDate: DateTimeInput;
  deathDate?: Maybe<DateTimeInput>;
}

export interface AddressCreateManyWithoutMemberInput {
  create?: Maybe<
    AddressCreateWithoutMemberInput[] | AddressCreateWithoutMemberInput
  >;
  connect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
}

export interface AddressCreateWithoutMemberInput {
  id?: Maybe<ID_Input>;
  type?: Maybe<AddressType>;
  address1: String;
  address2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  country?: Maybe<String>;
  zip?: Maybe<String>;
  effectiveStartDate?: Maybe<DateTimeInput>;
  effectiveEndDate?: Maybe<DateTimeInput>;
}

export interface ProviderCreateOneWithoutServicingAuthorizationsInput {
  create?: Maybe<ProviderCreateWithoutServicingAuthorizationsInput>;
  connect?: Maybe<ProviderWhereUniqueInput>;
}

export interface ProviderCreateWithoutServicingAuthorizationsInput {
  id?: Maybe<ID_Input>;
  name: String;
  status: ProviderStatus;
  members?: Maybe<MemberCreateManyWithoutPcpInput>;
  requestingAuthorizations?: Maybe<
    AuthorizationCreateManyWithoutRequestingProviderInput
  >;
}

export interface MemberCreateManyWithoutPcpInput {
  create?: Maybe<MemberCreateWithoutPcpInput[] | MemberCreateWithoutPcpInput>;
  connect?: Maybe<MemberWhereUniqueInput[] | MemberWhereUniqueInput>;
}

export interface MemberCreateWithoutPcpInput {
  id?: Maybe<ID_Input>;
  name: String;
  addresses?: Maybe<AddressCreateManyWithoutMemberInput>;
  status?: Maybe<MemberStatus>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  birthDate: DateTimeInput;
  deathDate?: Maybe<DateTimeInput>;
}

export interface DiagnosisCodeCreateManyInput {
  create?: Maybe<DiagnosisCodeCreateInput[] | DiagnosisCodeCreateInput>;
  connect?: Maybe<
    DiagnosisCodeWhereUniqueInput[] | DiagnosisCodeWhereUniqueInput
  >;
}

export interface DiagnosisCodeCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  name: String;
  description?: Maybe<String>;
}

export interface AuthorizationDecisionCreateManyWithoutAuthorizationInput {
  create?: Maybe<
    | AuthorizationDecisionCreateWithoutAuthorizationInput[]
    | AuthorizationDecisionCreateWithoutAuthorizationInput
  >;
  connect?: Maybe<
    | AuthorizationDecisionWhereUniqueInput[]
    | AuthorizationDecisionWhereUniqueInput
  >;
}

export interface AuthorizationDecisionCreateWithoutAuthorizationInput {
  id?: Maybe<ID_Input>;
  decidingUser: UserCreateOneInput;
  status: AuthorizationStatus;
  notes?: Maybe<String>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name: String;
}

export interface AuthorizationCreateManyWithoutServicingProviderInput {
  create?: Maybe<
    | AuthorizationCreateWithoutServicingProviderInput[]
    | AuthorizationCreateWithoutServicingProviderInput
  >;
  connect?: Maybe<
    AuthorizationWhereUniqueInput[] | AuthorizationWhereUniqueInput
  >;
}

export interface AuthorizationCreateWithoutServicingProviderInput {
  id?: Maybe<ID_Input>;
  type: AuthorizationType;
  status: AuthorizationStatus;
  member: MemberCreateOneInput;
  requestingProvider?: Maybe<
    ProviderCreateOneWithoutRequestingAuthorizationsInput
  >;
  diagnoses?: Maybe<DiagnosisCodeCreateManyInput>;
  decisions?: Maybe<AuthorizationDecisionCreateManyWithoutAuthorizationInput>;
}

export interface ProviderCreateOneWithoutRequestingAuthorizationsInput {
  create?: Maybe<ProviderCreateWithoutRequestingAuthorizationsInput>;
  connect?: Maybe<ProviderWhereUniqueInput>;
}

export interface ProviderCreateWithoutRequestingAuthorizationsInput {
  id?: Maybe<ID_Input>;
  name: String;
  status: ProviderStatus;
  members?: Maybe<MemberCreateManyWithoutPcpInput>;
  servicingAuthorizations?: Maybe<
    AuthorizationCreateManyWithoutServicingProviderInput
  >;
}

export interface AddressUpdateInput {
  type?: Maybe<AddressType>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  country?: Maybe<String>;
  zip?: Maybe<String>;
  effectiveStartDate?: Maybe<DateTimeInput>;
  effectiveEndDate?: Maybe<DateTimeInput>;
  member?: Maybe<MemberUpdateOneRequiredWithoutAddressesInput>;
}

export interface MemberUpdateOneRequiredWithoutAddressesInput {
  create?: Maybe<MemberCreateWithoutAddressesInput>;
  update?: Maybe<MemberUpdateWithoutAddressesDataInput>;
  upsert?: Maybe<MemberUpsertWithoutAddressesInput>;
  connect?: Maybe<MemberWhereUniqueInput>;
}

export interface MemberUpdateWithoutAddressesDataInput {
  name?: Maybe<String>;
  status?: Maybe<MemberStatus>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  pcp?: Maybe<ProviderUpdateOneWithoutMembersInput>;
  birthDate?: Maybe<DateTimeInput>;
  deathDate?: Maybe<DateTimeInput>;
}

export interface ProviderUpdateOneWithoutMembersInput {
  create?: Maybe<ProviderCreateWithoutMembersInput>;
  update?: Maybe<ProviderUpdateWithoutMembersDataInput>;
  upsert?: Maybe<ProviderUpsertWithoutMembersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProviderWhereUniqueInput>;
}

export interface ProviderUpdateWithoutMembersDataInput {
  name?: Maybe<String>;
  status?: Maybe<ProviderStatus>;
  requestingAuthorizations?: Maybe<
    AuthorizationUpdateManyWithoutRequestingProviderInput
  >;
  servicingAuthorizations?: Maybe<
    AuthorizationUpdateManyWithoutServicingProviderInput
  >;
}

export interface AuthorizationUpdateManyWithoutRequestingProviderInput {
  create?: Maybe<
    | AuthorizationCreateWithoutRequestingProviderInput[]
    | AuthorizationCreateWithoutRequestingProviderInput
  >;
  delete?: Maybe<
    AuthorizationWhereUniqueInput[] | AuthorizationWhereUniqueInput
  >;
  connect?: Maybe<
    AuthorizationWhereUniqueInput[] | AuthorizationWhereUniqueInput
  >;
  set?: Maybe<AuthorizationWhereUniqueInput[] | AuthorizationWhereUniqueInput>;
  disconnect?: Maybe<
    AuthorizationWhereUniqueInput[] | AuthorizationWhereUniqueInput
  >;
  update?: Maybe<
    | AuthorizationUpdateWithWhereUniqueWithoutRequestingProviderInput[]
    | AuthorizationUpdateWithWhereUniqueWithoutRequestingProviderInput
  >;
  upsert?: Maybe<
    | AuthorizationUpsertWithWhereUniqueWithoutRequestingProviderInput[]
    | AuthorizationUpsertWithWhereUniqueWithoutRequestingProviderInput
  >;
  deleteMany?: Maybe<
    AuthorizationScalarWhereInput[] | AuthorizationScalarWhereInput
  >;
  updateMany?: Maybe<
    | AuthorizationUpdateManyWithWhereNestedInput[]
    | AuthorizationUpdateManyWithWhereNestedInput
  >;
}

export interface AuthorizationUpdateWithWhereUniqueWithoutRequestingProviderInput {
  where: AuthorizationWhereUniqueInput;
  data: AuthorizationUpdateWithoutRequestingProviderDataInput;
}

export interface AuthorizationUpdateWithoutRequestingProviderDataInput {
  type?: Maybe<AuthorizationType>;
  status?: Maybe<AuthorizationStatus>;
  member?: Maybe<MemberUpdateOneRequiredInput>;
  servicingProvider?: Maybe<
    ProviderUpdateOneWithoutServicingAuthorizationsInput
  >;
  diagnoses?: Maybe<DiagnosisCodeUpdateManyInput>;
  decisions?: Maybe<AuthorizationDecisionUpdateManyWithoutAuthorizationInput>;
}

export interface MemberUpdateOneRequiredInput {
  create?: Maybe<MemberCreateInput>;
  update?: Maybe<MemberUpdateDataInput>;
  upsert?: Maybe<MemberUpsertNestedInput>;
  connect?: Maybe<MemberWhereUniqueInput>;
}

export interface MemberUpdateDataInput {
  name?: Maybe<String>;
  addresses?: Maybe<AddressUpdateManyWithoutMemberInput>;
  status?: Maybe<MemberStatus>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  pcp?: Maybe<ProviderUpdateOneWithoutMembersInput>;
  birthDate?: Maybe<DateTimeInput>;
  deathDate?: Maybe<DateTimeInput>;
}

export interface AddressUpdateManyWithoutMemberInput {
  create?: Maybe<
    AddressCreateWithoutMemberInput[] | AddressCreateWithoutMemberInput
  >;
  delete?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  connect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  set?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  disconnect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  update?: Maybe<
    | AddressUpdateWithWhereUniqueWithoutMemberInput[]
    | AddressUpdateWithWhereUniqueWithoutMemberInput
  >;
  upsert?: Maybe<
    | AddressUpsertWithWhereUniqueWithoutMemberInput[]
    | AddressUpsertWithWhereUniqueWithoutMemberInput
  >;
  deleteMany?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  updateMany?: Maybe<
    | AddressUpdateManyWithWhereNestedInput[]
    | AddressUpdateManyWithWhereNestedInput
  >;
}

export interface AddressUpdateWithWhereUniqueWithoutMemberInput {
  where: AddressWhereUniqueInput;
  data: AddressUpdateWithoutMemberDataInput;
}

export interface AddressUpdateWithoutMemberDataInput {
  type?: Maybe<AddressType>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  country?: Maybe<String>;
  zip?: Maybe<String>;
  effectiveStartDate?: Maybe<DateTimeInput>;
  effectiveEndDate?: Maybe<DateTimeInput>;
}

export interface AddressUpsertWithWhereUniqueWithoutMemberInput {
  where: AddressWhereUniqueInput;
  update: AddressUpdateWithoutMemberDataInput;
  create: AddressCreateWithoutMemberInput;
}

export interface AddressScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<AddressType>;
  type_not?: Maybe<AddressType>;
  type_in?: Maybe<AddressType[] | AddressType>;
  type_not_in?: Maybe<AddressType[] | AddressType>;
  address1?: Maybe<String>;
  address1_not?: Maybe<String>;
  address1_in?: Maybe<String[] | String>;
  address1_not_in?: Maybe<String[] | String>;
  address1_lt?: Maybe<String>;
  address1_lte?: Maybe<String>;
  address1_gt?: Maybe<String>;
  address1_gte?: Maybe<String>;
  address1_contains?: Maybe<String>;
  address1_not_contains?: Maybe<String>;
  address1_starts_with?: Maybe<String>;
  address1_not_starts_with?: Maybe<String>;
  address1_ends_with?: Maybe<String>;
  address1_not_ends_with?: Maybe<String>;
  address2?: Maybe<String>;
  address2_not?: Maybe<String>;
  address2_in?: Maybe<String[] | String>;
  address2_not_in?: Maybe<String[] | String>;
  address2_lt?: Maybe<String>;
  address2_lte?: Maybe<String>;
  address2_gt?: Maybe<String>;
  address2_gte?: Maybe<String>;
  address2_contains?: Maybe<String>;
  address2_not_contains?: Maybe<String>;
  address2_starts_with?: Maybe<String>;
  address2_not_starts_with?: Maybe<String>;
  address2_ends_with?: Maybe<String>;
  address2_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  zip?: Maybe<String>;
  zip_not?: Maybe<String>;
  zip_in?: Maybe<String[] | String>;
  zip_not_in?: Maybe<String[] | String>;
  zip_lt?: Maybe<String>;
  zip_lte?: Maybe<String>;
  zip_gt?: Maybe<String>;
  zip_gte?: Maybe<String>;
  zip_contains?: Maybe<String>;
  zip_not_contains?: Maybe<String>;
  zip_starts_with?: Maybe<String>;
  zip_not_starts_with?: Maybe<String>;
  zip_ends_with?: Maybe<String>;
  zip_not_ends_with?: Maybe<String>;
  effectiveStartDate?: Maybe<DateTimeInput>;
  effectiveStartDate_not?: Maybe<DateTimeInput>;
  effectiveStartDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  effectiveStartDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  effectiveStartDate_lt?: Maybe<DateTimeInput>;
  effectiveStartDate_lte?: Maybe<DateTimeInput>;
  effectiveStartDate_gt?: Maybe<DateTimeInput>;
  effectiveStartDate_gte?: Maybe<DateTimeInput>;
  effectiveEndDate?: Maybe<DateTimeInput>;
  effectiveEndDate_not?: Maybe<DateTimeInput>;
  effectiveEndDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  effectiveEndDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  effectiveEndDate_lt?: Maybe<DateTimeInput>;
  effectiveEndDate_lte?: Maybe<DateTimeInput>;
  effectiveEndDate_gt?: Maybe<DateTimeInput>;
  effectiveEndDate_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  OR?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  NOT?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
}

export interface AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput;
  data: AddressUpdateManyDataInput;
}

export interface AddressUpdateManyDataInput {
  type?: Maybe<AddressType>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  country?: Maybe<String>;
  zip?: Maybe<String>;
  effectiveStartDate?: Maybe<DateTimeInput>;
  effectiveEndDate?: Maybe<DateTimeInput>;
}

export interface MemberUpsertNestedInput {
  update: MemberUpdateDataInput;
  create: MemberCreateInput;
}

export interface ProviderUpdateOneWithoutServicingAuthorizationsInput {
  create?: Maybe<ProviderCreateWithoutServicingAuthorizationsInput>;
  update?: Maybe<ProviderUpdateWithoutServicingAuthorizationsDataInput>;
  upsert?: Maybe<ProviderUpsertWithoutServicingAuthorizationsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProviderWhereUniqueInput>;
}

export interface ProviderUpdateWithoutServicingAuthorizationsDataInput {
  name?: Maybe<String>;
  status?: Maybe<ProviderStatus>;
  members?: Maybe<MemberUpdateManyWithoutPcpInput>;
  requestingAuthorizations?: Maybe<
    AuthorizationUpdateManyWithoutRequestingProviderInput
  >;
}

export interface MemberUpdateManyWithoutPcpInput {
  create?: Maybe<MemberCreateWithoutPcpInput[] | MemberCreateWithoutPcpInput>;
  delete?: Maybe<MemberWhereUniqueInput[] | MemberWhereUniqueInput>;
  connect?: Maybe<MemberWhereUniqueInput[] | MemberWhereUniqueInput>;
  set?: Maybe<MemberWhereUniqueInput[] | MemberWhereUniqueInput>;
  disconnect?: Maybe<MemberWhereUniqueInput[] | MemberWhereUniqueInput>;
  update?: Maybe<
    | MemberUpdateWithWhereUniqueWithoutPcpInput[]
    | MemberUpdateWithWhereUniqueWithoutPcpInput
  >;
  upsert?: Maybe<
    | MemberUpsertWithWhereUniqueWithoutPcpInput[]
    | MemberUpsertWithWhereUniqueWithoutPcpInput
  >;
  deleteMany?: Maybe<MemberScalarWhereInput[] | MemberScalarWhereInput>;
  updateMany?: Maybe<
    | MemberUpdateManyWithWhereNestedInput[]
    | MemberUpdateManyWithWhereNestedInput
  >;
}

export interface MemberUpdateWithWhereUniqueWithoutPcpInput {
  where: MemberWhereUniqueInput;
  data: MemberUpdateWithoutPcpDataInput;
}

export interface MemberUpdateWithoutPcpDataInput {
  name?: Maybe<String>;
  addresses?: Maybe<AddressUpdateManyWithoutMemberInput>;
  status?: Maybe<MemberStatus>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  birthDate?: Maybe<DateTimeInput>;
  deathDate?: Maybe<DateTimeInput>;
}

export interface MemberUpsertWithWhereUniqueWithoutPcpInput {
  where: MemberWhereUniqueInput;
  update: MemberUpdateWithoutPcpDataInput;
  create: MemberCreateWithoutPcpInput;
}

export interface MemberScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  status?: Maybe<MemberStatus>;
  status_not?: Maybe<MemberStatus>;
  status_in?: Maybe<MemberStatus[] | MemberStatus>;
  status_not_in?: Maybe<MemberStatus[] | MemberStatus>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  birthDate?: Maybe<DateTimeInput>;
  birthDate_not?: Maybe<DateTimeInput>;
  birthDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthDate_lt?: Maybe<DateTimeInput>;
  birthDate_lte?: Maybe<DateTimeInput>;
  birthDate_gt?: Maybe<DateTimeInput>;
  birthDate_gte?: Maybe<DateTimeInput>;
  deathDate?: Maybe<DateTimeInput>;
  deathDate_not?: Maybe<DateTimeInput>;
  deathDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deathDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deathDate_lt?: Maybe<DateTimeInput>;
  deathDate_lte?: Maybe<DateTimeInput>;
  deathDate_gt?: Maybe<DateTimeInput>;
  deathDate_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MemberScalarWhereInput[] | MemberScalarWhereInput>;
  OR?: Maybe<MemberScalarWhereInput[] | MemberScalarWhereInput>;
  NOT?: Maybe<MemberScalarWhereInput[] | MemberScalarWhereInput>;
}

export interface MemberUpdateManyWithWhereNestedInput {
  where: MemberScalarWhereInput;
  data: MemberUpdateManyDataInput;
}

export interface MemberUpdateManyDataInput {
  name?: Maybe<String>;
  status?: Maybe<MemberStatus>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  birthDate?: Maybe<DateTimeInput>;
  deathDate?: Maybe<DateTimeInput>;
}

export interface ProviderUpsertWithoutServicingAuthorizationsInput {
  update: ProviderUpdateWithoutServicingAuthorizationsDataInput;
  create: ProviderCreateWithoutServicingAuthorizationsInput;
}

export interface DiagnosisCodeUpdateManyInput {
  create?: Maybe<DiagnosisCodeCreateInput[] | DiagnosisCodeCreateInput>;
  update?: Maybe<
    | DiagnosisCodeUpdateWithWhereUniqueNestedInput[]
    | DiagnosisCodeUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | DiagnosisCodeUpsertWithWhereUniqueNestedInput[]
    | DiagnosisCodeUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    DiagnosisCodeWhereUniqueInput[] | DiagnosisCodeWhereUniqueInput
  >;
  connect?: Maybe<
    DiagnosisCodeWhereUniqueInput[] | DiagnosisCodeWhereUniqueInput
  >;
  set?: Maybe<DiagnosisCodeWhereUniqueInput[] | DiagnosisCodeWhereUniqueInput>;
  disconnect?: Maybe<
    DiagnosisCodeWhereUniqueInput[] | DiagnosisCodeWhereUniqueInput
  >;
  deleteMany?: Maybe<
    DiagnosisCodeScalarWhereInput[] | DiagnosisCodeScalarWhereInput
  >;
  updateMany?: Maybe<
    | DiagnosisCodeUpdateManyWithWhereNestedInput[]
    | DiagnosisCodeUpdateManyWithWhereNestedInput
  >;
}

export interface DiagnosisCodeUpdateWithWhereUniqueNestedInput {
  where: DiagnosisCodeWhereUniqueInput;
  data: DiagnosisCodeUpdateDataInput;
}

export interface DiagnosisCodeUpdateDataInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface DiagnosisCodeUpsertWithWhereUniqueNestedInput {
  where: DiagnosisCodeWhereUniqueInput;
  update: DiagnosisCodeUpdateDataInput;
  create: DiagnosisCodeCreateInput;
}

export interface DiagnosisCodeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<DiagnosisCodeScalarWhereInput[] | DiagnosisCodeScalarWhereInput>;
  OR?: Maybe<DiagnosisCodeScalarWhereInput[] | DiagnosisCodeScalarWhereInput>;
  NOT?: Maybe<DiagnosisCodeScalarWhereInput[] | DiagnosisCodeScalarWhereInput>;
}

export interface DiagnosisCodeUpdateManyWithWhereNestedInput {
  where: DiagnosisCodeScalarWhereInput;
  data: DiagnosisCodeUpdateManyDataInput;
}

export interface DiagnosisCodeUpdateManyDataInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface AuthorizationDecisionUpdateManyWithoutAuthorizationInput {
  create?: Maybe<
    | AuthorizationDecisionCreateWithoutAuthorizationInput[]
    | AuthorizationDecisionCreateWithoutAuthorizationInput
  >;
  delete?: Maybe<
    | AuthorizationDecisionWhereUniqueInput[]
    | AuthorizationDecisionWhereUniqueInput
  >;
  connect?: Maybe<
    | AuthorizationDecisionWhereUniqueInput[]
    | AuthorizationDecisionWhereUniqueInput
  >;
  set?: Maybe<
    | AuthorizationDecisionWhereUniqueInput[]
    | AuthorizationDecisionWhereUniqueInput
  >;
  disconnect?: Maybe<
    | AuthorizationDecisionWhereUniqueInput[]
    | AuthorizationDecisionWhereUniqueInput
  >;
  update?: Maybe<
    | AuthorizationDecisionUpdateWithWhereUniqueWithoutAuthorizationInput[]
    | AuthorizationDecisionUpdateWithWhereUniqueWithoutAuthorizationInput
  >;
  upsert?: Maybe<
    | AuthorizationDecisionUpsertWithWhereUniqueWithoutAuthorizationInput[]
    | AuthorizationDecisionUpsertWithWhereUniqueWithoutAuthorizationInput
  >;
  deleteMany?: Maybe<
    | AuthorizationDecisionScalarWhereInput[]
    | AuthorizationDecisionScalarWhereInput
  >;
  updateMany?: Maybe<
    | AuthorizationDecisionUpdateManyWithWhereNestedInput[]
    | AuthorizationDecisionUpdateManyWithWhereNestedInput
  >;
}

export interface AuthorizationDecisionUpdateWithWhereUniqueWithoutAuthorizationInput {
  where: AuthorizationDecisionWhereUniqueInput;
  data: AuthorizationDecisionUpdateWithoutAuthorizationDataInput;
}

export interface AuthorizationDecisionUpdateWithoutAuthorizationDataInput {
  decidingUser?: Maybe<UserUpdateOneRequiredInput>;
  status?: Maybe<AuthorizationStatus>;
  notes?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface AuthorizationDecisionUpsertWithWhereUniqueWithoutAuthorizationInput {
  where: AuthorizationDecisionWhereUniqueInput;
  update: AuthorizationDecisionUpdateWithoutAuthorizationDataInput;
  create: AuthorizationDecisionCreateWithoutAuthorizationInput;
}

export interface AuthorizationDecisionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<AuthorizationStatus>;
  status_not?: Maybe<AuthorizationStatus>;
  status_in?: Maybe<AuthorizationStatus[] | AuthorizationStatus>;
  status_not_in?: Maybe<AuthorizationStatus[] | AuthorizationStatus>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    | AuthorizationDecisionScalarWhereInput[]
    | AuthorizationDecisionScalarWhereInput
  >;
  OR?: Maybe<
    | AuthorizationDecisionScalarWhereInput[]
    | AuthorizationDecisionScalarWhereInput
  >;
  NOT?: Maybe<
    | AuthorizationDecisionScalarWhereInput[]
    | AuthorizationDecisionScalarWhereInput
  >;
}

export interface AuthorizationDecisionUpdateManyWithWhereNestedInput {
  where: AuthorizationDecisionScalarWhereInput;
  data: AuthorizationDecisionUpdateManyDataInput;
}

export interface AuthorizationDecisionUpdateManyDataInput {
  status?: Maybe<AuthorizationStatus>;
  notes?: Maybe<String>;
}

export interface AuthorizationUpsertWithWhereUniqueWithoutRequestingProviderInput {
  where: AuthorizationWhereUniqueInput;
  update: AuthorizationUpdateWithoutRequestingProviderDataInput;
  create: AuthorizationCreateWithoutRequestingProviderInput;
}

export interface AuthorizationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<AuthorizationType>;
  type_not?: Maybe<AuthorizationType>;
  type_in?: Maybe<AuthorizationType[] | AuthorizationType>;
  type_not_in?: Maybe<AuthorizationType[] | AuthorizationType>;
  status?: Maybe<AuthorizationStatus>;
  status_not?: Maybe<AuthorizationStatus>;
  status_in?: Maybe<AuthorizationStatus[] | AuthorizationStatus>;
  status_not_in?: Maybe<AuthorizationStatus[] | AuthorizationStatus>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AuthorizationScalarWhereInput[] | AuthorizationScalarWhereInput>;
  OR?: Maybe<AuthorizationScalarWhereInput[] | AuthorizationScalarWhereInput>;
  NOT?: Maybe<AuthorizationScalarWhereInput[] | AuthorizationScalarWhereInput>;
}

export interface AuthorizationUpdateManyWithWhereNestedInput {
  where: AuthorizationScalarWhereInput;
  data: AuthorizationUpdateManyDataInput;
}

export interface AuthorizationUpdateManyDataInput {
  type?: Maybe<AuthorizationType>;
  status?: Maybe<AuthorizationStatus>;
}

export interface AuthorizationUpdateManyWithoutServicingProviderInput {
  create?: Maybe<
    | AuthorizationCreateWithoutServicingProviderInput[]
    | AuthorizationCreateWithoutServicingProviderInput
  >;
  delete?: Maybe<
    AuthorizationWhereUniqueInput[] | AuthorizationWhereUniqueInput
  >;
  connect?: Maybe<
    AuthorizationWhereUniqueInput[] | AuthorizationWhereUniqueInput
  >;
  set?: Maybe<AuthorizationWhereUniqueInput[] | AuthorizationWhereUniqueInput>;
  disconnect?: Maybe<
    AuthorizationWhereUniqueInput[] | AuthorizationWhereUniqueInput
  >;
  update?: Maybe<
    | AuthorizationUpdateWithWhereUniqueWithoutServicingProviderInput[]
    | AuthorizationUpdateWithWhereUniqueWithoutServicingProviderInput
  >;
  upsert?: Maybe<
    | AuthorizationUpsertWithWhereUniqueWithoutServicingProviderInput[]
    | AuthorizationUpsertWithWhereUniqueWithoutServicingProviderInput
  >;
  deleteMany?: Maybe<
    AuthorizationScalarWhereInput[] | AuthorizationScalarWhereInput
  >;
  updateMany?: Maybe<
    | AuthorizationUpdateManyWithWhereNestedInput[]
    | AuthorizationUpdateManyWithWhereNestedInput
  >;
}

export interface AuthorizationUpdateWithWhereUniqueWithoutServicingProviderInput {
  where: AuthorizationWhereUniqueInput;
  data: AuthorizationUpdateWithoutServicingProviderDataInput;
}

export interface AuthorizationUpdateWithoutServicingProviderDataInput {
  type?: Maybe<AuthorizationType>;
  status?: Maybe<AuthorizationStatus>;
  member?: Maybe<MemberUpdateOneRequiredInput>;
  requestingProvider?: Maybe<
    ProviderUpdateOneWithoutRequestingAuthorizationsInput
  >;
  diagnoses?: Maybe<DiagnosisCodeUpdateManyInput>;
  decisions?: Maybe<AuthorizationDecisionUpdateManyWithoutAuthorizationInput>;
}

export interface ProviderUpdateOneWithoutRequestingAuthorizationsInput {
  create?: Maybe<ProviderCreateWithoutRequestingAuthorizationsInput>;
  update?: Maybe<ProviderUpdateWithoutRequestingAuthorizationsDataInput>;
  upsert?: Maybe<ProviderUpsertWithoutRequestingAuthorizationsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProviderWhereUniqueInput>;
}

export interface ProviderUpdateWithoutRequestingAuthorizationsDataInput {
  name?: Maybe<String>;
  status?: Maybe<ProviderStatus>;
  members?: Maybe<MemberUpdateManyWithoutPcpInput>;
  servicingAuthorizations?: Maybe<
    AuthorizationUpdateManyWithoutServicingProviderInput
  >;
}

export interface ProviderUpsertWithoutRequestingAuthorizationsInput {
  update: ProviderUpdateWithoutRequestingAuthorizationsDataInput;
  create: ProviderCreateWithoutRequestingAuthorizationsInput;
}

export interface AuthorizationUpsertWithWhereUniqueWithoutServicingProviderInput {
  where: AuthorizationWhereUniqueInput;
  update: AuthorizationUpdateWithoutServicingProviderDataInput;
  create: AuthorizationCreateWithoutServicingProviderInput;
}

export interface ProviderUpsertWithoutMembersInput {
  update: ProviderUpdateWithoutMembersDataInput;
  create: ProviderCreateWithoutMembersInput;
}

export interface MemberUpsertWithoutAddressesInput {
  update: MemberUpdateWithoutAddressesDataInput;
  create: MemberCreateWithoutAddressesInput;
}

export interface AddressUpdateManyMutationInput {
  type?: Maybe<AddressType>;
  address1?: Maybe<String>;
  address2?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  country?: Maybe<String>;
  zip?: Maybe<String>;
  effectiveStartDate?: Maybe<DateTimeInput>;
  effectiveEndDate?: Maybe<DateTimeInput>;
}

export interface AuthorizationCreateInput {
  id?: Maybe<ID_Input>;
  type: AuthorizationType;
  status: AuthorizationStatus;
  member: MemberCreateOneInput;
  requestingProvider?: Maybe<
    ProviderCreateOneWithoutRequestingAuthorizationsInput
  >;
  servicingProvider?: Maybe<
    ProviderCreateOneWithoutServicingAuthorizationsInput
  >;
  diagnoses?: Maybe<DiagnosisCodeCreateManyInput>;
  decisions?: Maybe<AuthorizationDecisionCreateManyWithoutAuthorizationInput>;
}

export interface AuthorizationUpdateInput {
  type?: Maybe<AuthorizationType>;
  status?: Maybe<AuthorizationStatus>;
  member?: Maybe<MemberUpdateOneRequiredInput>;
  requestingProvider?: Maybe<
    ProviderUpdateOneWithoutRequestingAuthorizationsInput
  >;
  servicingProvider?: Maybe<
    ProviderUpdateOneWithoutServicingAuthorizationsInput
  >;
  diagnoses?: Maybe<DiagnosisCodeUpdateManyInput>;
  decisions?: Maybe<AuthorizationDecisionUpdateManyWithoutAuthorizationInput>;
}

export interface AuthorizationUpdateManyMutationInput {
  type?: Maybe<AuthorizationType>;
  status?: Maybe<AuthorizationStatus>;
}

export interface AuthorizationDecisionCreateInput {
  id?: Maybe<ID_Input>;
  authorization: AuthorizationCreateOneWithoutDecisionsInput;
  decidingUser: UserCreateOneInput;
  status: AuthorizationStatus;
  notes?: Maybe<String>;
}

export interface AuthorizationCreateOneWithoutDecisionsInput {
  create?: Maybe<AuthorizationCreateWithoutDecisionsInput>;
  connect?: Maybe<AuthorizationWhereUniqueInput>;
}

export interface AuthorizationCreateWithoutDecisionsInput {
  id?: Maybe<ID_Input>;
  type: AuthorizationType;
  status: AuthorizationStatus;
  member: MemberCreateOneInput;
  requestingProvider?: Maybe<
    ProviderCreateOneWithoutRequestingAuthorizationsInput
  >;
  servicingProvider?: Maybe<
    ProviderCreateOneWithoutServicingAuthorizationsInput
  >;
  diagnoses?: Maybe<DiagnosisCodeCreateManyInput>;
}

export interface AuthorizationDecisionUpdateInput {
  authorization?: Maybe<AuthorizationUpdateOneRequiredWithoutDecisionsInput>;
  decidingUser?: Maybe<UserUpdateOneRequiredInput>;
  status?: Maybe<AuthorizationStatus>;
  notes?: Maybe<String>;
}

export interface AuthorizationUpdateOneRequiredWithoutDecisionsInput {
  create?: Maybe<AuthorizationCreateWithoutDecisionsInput>;
  update?: Maybe<AuthorizationUpdateWithoutDecisionsDataInput>;
  upsert?: Maybe<AuthorizationUpsertWithoutDecisionsInput>;
  connect?: Maybe<AuthorizationWhereUniqueInput>;
}

export interface AuthorizationUpdateWithoutDecisionsDataInput {
  type?: Maybe<AuthorizationType>;
  status?: Maybe<AuthorizationStatus>;
  member?: Maybe<MemberUpdateOneRequiredInput>;
  requestingProvider?: Maybe<
    ProviderUpdateOneWithoutRequestingAuthorizationsInput
  >;
  servicingProvider?: Maybe<
    ProviderUpdateOneWithoutServicingAuthorizationsInput
  >;
  diagnoses?: Maybe<DiagnosisCodeUpdateManyInput>;
}

export interface AuthorizationUpsertWithoutDecisionsInput {
  update: AuthorizationUpdateWithoutDecisionsDataInput;
  create: AuthorizationCreateWithoutDecisionsInput;
}

export interface AuthorizationDecisionUpdateManyMutationInput {
  status?: Maybe<AuthorizationStatus>;
  notes?: Maybe<String>;
}

export interface DiagnosisCodeUpdateInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface DiagnosisCodeUpdateManyMutationInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface MemberUpdateInput {
  name?: Maybe<String>;
  addresses?: Maybe<AddressUpdateManyWithoutMemberInput>;
  status?: Maybe<MemberStatus>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  pcp?: Maybe<ProviderUpdateOneWithoutMembersInput>;
  birthDate?: Maybe<DateTimeInput>;
  deathDate?: Maybe<DateTimeInput>;
}

export interface MemberUpdateManyMutationInput {
  name?: Maybe<String>;
  status?: Maybe<MemberStatus>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  birthDate?: Maybe<DateTimeInput>;
  deathDate?: Maybe<DateTimeInput>;
}

export interface ProviderCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  status: ProviderStatus;
  members?: Maybe<MemberCreateManyWithoutPcpInput>;
  requestingAuthorizations?: Maybe<
    AuthorizationCreateManyWithoutRequestingProviderInput
  >;
  servicingAuthorizations?: Maybe<
    AuthorizationCreateManyWithoutServicingProviderInput
  >;
}

export interface ProviderUpdateInput {
  name?: Maybe<String>;
  status?: Maybe<ProviderStatus>;
  members?: Maybe<MemberUpdateManyWithoutPcpInput>;
  requestingAuthorizations?: Maybe<
    AuthorizationUpdateManyWithoutRequestingProviderInput
  >;
  servicingAuthorizations?: Maybe<
    AuthorizationUpdateManyWithoutServicingProviderInput
  >;
}

export interface ProviderUpdateManyMutationInput {
  name?: Maybe<String>;
  status?: Maybe<ProviderStatus>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface AddressSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AddressWhereInput>;
  AND?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  OR?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  NOT?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
}

export interface AuthorizationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AuthorizationWhereInput>;
  AND?: Maybe<
    AuthorizationSubscriptionWhereInput[] | AuthorizationSubscriptionWhereInput
  >;
  OR?: Maybe<
    AuthorizationSubscriptionWhereInput[] | AuthorizationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AuthorizationSubscriptionWhereInput[] | AuthorizationSubscriptionWhereInput
  >;
}

export interface AuthorizationDecisionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AuthorizationDecisionWhereInput>;
  AND?: Maybe<
    | AuthorizationDecisionSubscriptionWhereInput[]
    | AuthorizationDecisionSubscriptionWhereInput
  >;
  OR?: Maybe<
    | AuthorizationDecisionSubscriptionWhereInput[]
    | AuthorizationDecisionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | AuthorizationDecisionSubscriptionWhereInput[]
    | AuthorizationDecisionSubscriptionWhereInput
  >;
}

export interface DiagnosisCodeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DiagnosisCodeWhereInput>;
  AND?: Maybe<
    DiagnosisCodeSubscriptionWhereInput[] | DiagnosisCodeSubscriptionWhereInput
  >;
  OR?: Maybe<
    DiagnosisCodeSubscriptionWhereInput[] | DiagnosisCodeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    DiagnosisCodeSubscriptionWhereInput[] | DiagnosisCodeSubscriptionWhereInput
  >;
}

export interface MemberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MemberWhereInput>;
  AND?: Maybe<MemberSubscriptionWhereInput[] | MemberSubscriptionWhereInput>;
  OR?: Maybe<MemberSubscriptionWhereInput[] | MemberSubscriptionWhereInput>;
  NOT?: Maybe<MemberSubscriptionWhereInput[] | MemberSubscriptionWhereInput>;
}

export interface ProviderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProviderWhereInput>;
  AND?: Maybe<
    ProviderSubscriptionWhereInput[] | ProviderSubscriptionWhereInput
  >;
  OR?: Maybe<ProviderSubscriptionWhereInput[] | ProviderSubscriptionWhereInput>;
  NOT?: Maybe<
    ProviderSubscriptionWhereInput[] | ProviderSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Address {
  id: ID_Output;
  type?: AddressType;
  address1: String;
  address2?: String;
  city?: String;
  state?: String;
  country?: String;
  zip?: String;
  effectiveStartDate?: DateTimeOutput;
  effectiveEndDate?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AddressPromise extends Promise<Address>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AddressType>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  country: () => Promise<String>;
  zip: () => Promise<String>;
  effectiveStartDate: () => Promise<DateTimeOutput>;
  effectiveEndDate: () => Promise<DateTimeOutput>;
  member: <T = MemberPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AddressSubscription
  extends Promise<AsyncIterator<Address>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<AddressType>>;
  address1: () => Promise<AsyncIterator<String>>;
  address2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  effectiveStartDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  effectiveEndDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  member: <T = MemberSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AddressNullablePromise
  extends Promise<Address | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AddressType>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  country: () => Promise<String>;
  zip: () => Promise<String>;
  effectiveStartDate: () => Promise<DateTimeOutput>;
  effectiveEndDate: () => Promise<DateTimeOutput>;
  member: <T = MemberPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Member {
  id: ID_Output;
  name: String;
  status?: MemberStatus;
  email?: String;
  phone?: String;
  birthDate: DateTimeOutput;
  deathDate?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MemberPromise extends Promise<Member>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  addresses: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<MemberStatus>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  pcp: <T = ProviderPromise>() => T;
  birthDate: () => Promise<DateTimeOutput>;
  deathDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MemberSubscription
  extends Promise<AsyncIterator<Member>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  addresses: <T = Promise<AsyncIterator<AddressSubscription>>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<AsyncIterator<MemberStatus>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  pcp: <T = ProviderSubscription>() => T;
  birthDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  deathDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MemberNullablePromise
  extends Promise<Member | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  addresses: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<MemberStatus>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  pcp: <T = ProviderPromise>() => T;
  birthDate: () => Promise<DateTimeOutput>;
  deathDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Provider {
  id: ID_Output;
  name: String;
  status: ProviderStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProviderPromise extends Promise<Provider>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  status: () => Promise<ProviderStatus>;
  members: <T = FragmentableArray<Member>>(args?: {
    where?: MemberWhereInput;
    orderBy?: MemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  requestingAuthorizations: <T = FragmentableArray<Authorization>>(args?: {
    where?: AuthorizationWhereInput;
    orderBy?: AuthorizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  servicingAuthorizations: <T = FragmentableArray<Authorization>>(args?: {
    where?: AuthorizationWhereInput;
    orderBy?: AuthorizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProviderSubscription
  extends Promise<AsyncIterator<Provider>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<ProviderStatus>>;
  members: <T = Promise<AsyncIterator<MemberSubscription>>>(args?: {
    where?: MemberWhereInput;
    orderBy?: MemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  requestingAuthorizations: <
    T = Promise<AsyncIterator<AuthorizationSubscription>>
  >(args?: {
    where?: AuthorizationWhereInput;
    orderBy?: AuthorizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  servicingAuthorizations: <
    T = Promise<AsyncIterator<AuthorizationSubscription>>
  >(args?: {
    where?: AuthorizationWhereInput;
    orderBy?: AuthorizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProviderNullablePromise
  extends Promise<Provider | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  status: () => Promise<ProviderStatus>;
  members: <T = FragmentableArray<Member>>(args?: {
    where?: MemberWhereInput;
    orderBy?: MemberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  requestingAuthorizations: <T = FragmentableArray<Authorization>>(args?: {
    where?: AuthorizationWhereInput;
    orderBy?: AuthorizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  servicingAuthorizations: <T = FragmentableArray<Authorization>>(args?: {
    where?: AuthorizationWhereInput;
    orderBy?: AuthorizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Authorization {
  id: ID_Output;
  type: AuthorizationType;
  status: AuthorizationStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AuthorizationPromise
  extends Promise<Authorization>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AuthorizationType>;
  status: () => Promise<AuthorizationStatus>;
  member: <T = MemberPromise>() => T;
  requestingProvider: <T = ProviderPromise>() => T;
  servicingProvider: <T = ProviderPromise>() => T;
  diagnoses: <T = FragmentableArray<DiagnosisCode>>(args?: {
    where?: DiagnosisCodeWhereInput;
    orderBy?: DiagnosisCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  decisions: <T = FragmentableArray<AuthorizationDecision>>(args?: {
    where?: AuthorizationDecisionWhereInput;
    orderBy?: AuthorizationDecisionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AuthorizationSubscription
  extends Promise<AsyncIterator<Authorization>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<AuthorizationType>>;
  status: () => Promise<AsyncIterator<AuthorizationStatus>>;
  member: <T = MemberSubscription>() => T;
  requestingProvider: <T = ProviderSubscription>() => T;
  servicingProvider: <T = ProviderSubscription>() => T;
  diagnoses: <T = Promise<AsyncIterator<DiagnosisCodeSubscription>>>(args?: {
    where?: DiagnosisCodeWhereInput;
    orderBy?: DiagnosisCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  decisions: <
    T = Promise<AsyncIterator<AuthorizationDecisionSubscription>>
  >(args?: {
    where?: AuthorizationDecisionWhereInput;
    orderBy?: AuthorizationDecisionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AuthorizationNullablePromise
  extends Promise<Authorization | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AuthorizationType>;
  status: () => Promise<AuthorizationStatus>;
  member: <T = MemberPromise>() => T;
  requestingProvider: <T = ProviderPromise>() => T;
  servicingProvider: <T = ProviderPromise>() => T;
  diagnoses: <T = FragmentableArray<DiagnosisCode>>(args?: {
    where?: DiagnosisCodeWhereInput;
    orderBy?: DiagnosisCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  decisions: <T = FragmentableArray<AuthorizationDecision>>(args?: {
    where?: AuthorizationDecisionWhereInput;
    orderBy?: AuthorizationDecisionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DiagnosisCode {
  id: ID_Output;
  code: String;
  name: String;
  description?: String;
}

export interface DiagnosisCodePromise
  extends Promise<DiagnosisCode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface DiagnosisCodeSubscription
  extends Promise<AsyncIterator<DiagnosisCode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface DiagnosisCodeNullablePromise
  extends Promise<DiagnosisCode | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface AuthorizationDecision {
  id: ID_Output;
  status: AuthorizationStatus;
  notes?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AuthorizationDecisionPromise
  extends Promise<AuthorizationDecision>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  authorization: <T = AuthorizationPromise>() => T;
  decidingUser: <T = UserPromise>() => T;
  status: () => Promise<AuthorizationStatus>;
  notes: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AuthorizationDecisionSubscription
  extends Promise<AsyncIterator<AuthorizationDecision>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  authorization: <T = AuthorizationSubscription>() => T;
  decidingUser: <T = UserSubscription>() => T;
  status: () => Promise<AsyncIterator<AuthorizationStatus>>;
  notes: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AuthorizationDecisionNullablePromise
  extends Promise<AuthorizationDecision | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  authorization: <T = AuthorizationPromise>() => T;
  decidingUser: <T = UserPromise>() => T;
  status: () => Promise<AuthorizationStatus>;
  notes: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  email?: String;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AddressConnection {
  pageInfo: PageInfo;
  edges: AddressEdge[];
}

export interface AddressConnectionPromise
  extends Promise<AddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressEdge>>() => T;
  aggregate: <T = AggregateAddressPromise>() => T;
}

export interface AddressConnectionSubscription
  extends Promise<AsyncIterator<AddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AddressEdge {
  node: Address;
  cursor: String;
}

export interface AddressEdgePromise extends Promise<AddressEdge>, Fragmentable {
  node: <T = AddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressEdgeSubscription
  extends Promise<AsyncIterator<AddressEdge>>,
    Fragmentable {
  node: <T = AddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAddress {
  count: Int;
}

export interface AggregateAddressPromise
  extends Promise<AggregateAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressSubscription
  extends Promise<AsyncIterator<AggregateAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AuthorizationConnection {
  pageInfo: PageInfo;
  edges: AuthorizationEdge[];
}

export interface AuthorizationConnectionPromise
  extends Promise<AuthorizationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AuthorizationEdge>>() => T;
  aggregate: <T = AggregateAuthorizationPromise>() => T;
}

export interface AuthorizationConnectionSubscription
  extends Promise<AsyncIterator<AuthorizationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AuthorizationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAuthorizationSubscription>() => T;
}

export interface AuthorizationEdge {
  node: Authorization;
  cursor: String;
}

export interface AuthorizationEdgePromise
  extends Promise<AuthorizationEdge>,
    Fragmentable {
  node: <T = AuthorizationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AuthorizationEdgeSubscription
  extends Promise<AsyncIterator<AuthorizationEdge>>,
    Fragmentable {
  node: <T = AuthorizationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAuthorization {
  count: Int;
}

export interface AggregateAuthorizationPromise
  extends Promise<AggregateAuthorization>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuthorizationSubscription
  extends Promise<AsyncIterator<AggregateAuthorization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AuthorizationDecisionConnection {
  pageInfo: PageInfo;
  edges: AuthorizationDecisionEdge[];
}

export interface AuthorizationDecisionConnectionPromise
  extends Promise<AuthorizationDecisionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AuthorizationDecisionEdge>>() => T;
  aggregate: <T = AggregateAuthorizationDecisionPromise>() => T;
}

export interface AuthorizationDecisionConnectionSubscription
  extends Promise<AsyncIterator<AuthorizationDecisionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<AuthorizationDecisionEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateAuthorizationDecisionSubscription>() => T;
}

export interface AuthorizationDecisionEdge {
  node: AuthorizationDecision;
  cursor: String;
}

export interface AuthorizationDecisionEdgePromise
  extends Promise<AuthorizationDecisionEdge>,
    Fragmentable {
  node: <T = AuthorizationDecisionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AuthorizationDecisionEdgeSubscription
  extends Promise<AsyncIterator<AuthorizationDecisionEdge>>,
    Fragmentable {
  node: <T = AuthorizationDecisionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAuthorizationDecision {
  count: Int;
}

export interface AggregateAuthorizationDecisionPromise
  extends Promise<AggregateAuthorizationDecision>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuthorizationDecisionSubscription
  extends Promise<AsyncIterator<AggregateAuthorizationDecision>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DiagnosisCodeConnection {
  pageInfo: PageInfo;
  edges: DiagnosisCodeEdge[];
}

export interface DiagnosisCodeConnectionPromise
  extends Promise<DiagnosisCodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DiagnosisCodeEdge>>() => T;
  aggregate: <T = AggregateDiagnosisCodePromise>() => T;
}

export interface DiagnosisCodeConnectionSubscription
  extends Promise<AsyncIterator<DiagnosisCodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DiagnosisCodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDiagnosisCodeSubscription>() => T;
}

export interface DiagnosisCodeEdge {
  node: DiagnosisCode;
  cursor: String;
}

export interface DiagnosisCodeEdgePromise
  extends Promise<DiagnosisCodeEdge>,
    Fragmentable {
  node: <T = DiagnosisCodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DiagnosisCodeEdgeSubscription
  extends Promise<AsyncIterator<DiagnosisCodeEdge>>,
    Fragmentable {
  node: <T = DiagnosisCodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDiagnosisCode {
  count: Int;
}

export interface AggregateDiagnosisCodePromise
  extends Promise<AggregateDiagnosisCode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDiagnosisCodeSubscription
  extends Promise<AsyncIterator<AggregateDiagnosisCode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MemberConnection {
  pageInfo: PageInfo;
  edges: MemberEdge[];
}

export interface MemberConnectionPromise
  extends Promise<MemberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MemberEdge>>() => T;
  aggregate: <T = AggregateMemberPromise>() => T;
}

export interface MemberConnectionSubscription
  extends Promise<AsyncIterator<MemberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MemberEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMemberSubscription>() => T;
}

export interface MemberEdge {
  node: Member;
  cursor: String;
}

export interface MemberEdgePromise extends Promise<MemberEdge>, Fragmentable {
  node: <T = MemberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MemberEdgeSubscription
  extends Promise<AsyncIterator<MemberEdge>>,
    Fragmentable {
  node: <T = MemberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMember {
  count: Int;
}

export interface AggregateMemberPromise
  extends Promise<AggregateMember>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMemberSubscription
  extends Promise<AsyncIterator<AggregateMember>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProviderConnection {
  pageInfo: PageInfo;
  edges: ProviderEdge[];
}

export interface ProviderConnectionPromise
  extends Promise<ProviderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProviderEdge>>() => T;
  aggregate: <T = AggregateProviderPromise>() => T;
}

export interface ProviderConnectionSubscription
  extends Promise<AsyncIterator<ProviderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProviderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProviderSubscription>() => T;
}

export interface ProviderEdge {
  node: Provider;
  cursor: String;
}

export interface ProviderEdgePromise
  extends Promise<ProviderEdge>,
    Fragmentable {
  node: <T = ProviderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProviderEdgeSubscription
  extends Promise<AsyncIterator<ProviderEdge>>,
    Fragmentable {
  node: <T = ProviderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProvider {
  count: Int;
}

export interface AggregateProviderPromise
  extends Promise<AggregateProvider>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProviderSubscription
  extends Promise<AsyncIterator<AggregateProvider>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AddressSubscriptionPayload {
  mutation: MutationType;
  node: Address;
  updatedFields: String[];
  previousValues: AddressPreviousValues;
}

export interface AddressSubscriptionPayloadPromise
  extends Promise<AddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddressPreviousValuesPromise>() => T;
}

export interface AddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddressPreviousValuesSubscription>() => T;
}

export interface AddressPreviousValues {
  id: ID_Output;
  type?: AddressType;
  address1: String;
  address2?: String;
  city?: String;
  state?: String;
  country?: String;
  zip?: String;
  effectiveStartDate?: DateTimeOutput;
  effectiveEndDate?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AddressPreviousValuesPromise
  extends Promise<AddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AddressType>;
  address1: () => Promise<String>;
  address2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  country: () => Promise<String>;
  zip: () => Promise<String>;
  effectiveStartDate: () => Promise<DateTimeOutput>;
  effectiveEndDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AddressPreviousValuesSubscription
  extends Promise<AsyncIterator<AddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<AddressType>>;
  address1: () => Promise<AsyncIterator<String>>;
  address2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<String>>;
  effectiveStartDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  effectiveEndDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AuthorizationSubscriptionPayload {
  mutation: MutationType;
  node: Authorization;
  updatedFields: String[];
  previousValues: AuthorizationPreviousValues;
}

export interface AuthorizationSubscriptionPayloadPromise
  extends Promise<AuthorizationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AuthorizationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AuthorizationPreviousValuesPromise>() => T;
}

export interface AuthorizationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AuthorizationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AuthorizationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AuthorizationPreviousValuesSubscription>() => T;
}

export interface AuthorizationPreviousValues {
  id: ID_Output;
  type: AuthorizationType;
  status: AuthorizationStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AuthorizationPreviousValuesPromise
  extends Promise<AuthorizationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<AuthorizationType>;
  status: () => Promise<AuthorizationStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AuthorizationPreviousValuesSubscription
  extends Promise<AsyncIterator<AuthorizationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<AuthorizationType>>;
  status: () => Promise<AsyncIterator<AuthorizationStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AuthorizationDecisionSubscriptionPayload {
  mutation: MutationType;
  node: AuthorizationDecision;
  updatedFields: String[];
  previousValues: AuthorizationDecisionPreviousValues;
}

export interface AuthorizationDecisionSubscriptionPayloadPromise
  extends Promise<AuthorizationDecisionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AuthorizationDecisionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AuthorizationDecisionPreviousValuesPromise>() => T;
}

export interface AuthorizationDecisionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AuthorizationDecisionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AuthorizationDecisionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AuthorizationDecisionPreviousValuesSubscription>() => T;
}

export interface AuthorizationDecisionPreviousValues {
  id: ID_Output;
  status: AuthorizationStatus;
  notes?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AuthorizationDecisionPreviousValuesPromise
  extends Promise<AuthorizationDecisionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<AuthorizationStatus>;
  notes: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AuthorizationDecisionPreviousValuesSubscription
  extends Promise<AsyncIterator<AuthorizationDecisionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<AuthorizationStatus>>;
  notes: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DiagnosisCodeSubscriptionPayload {
  mutation: MutationType;
  node: DiagnosisCode;
  updatedFields: String[];
  previousValues: DiagnosisCodePreviousValues;
}

export interface DiagnosisCodeSubscriptionPayloadPromise
  extends Promise<DiagnosisCodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DiagnosisCodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DiagnosisCodePreviousValuesPromise>() => T;
}

export interface DiagnosisCodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DiagnosisCodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DiagnosisCodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DiagnosisCodePreviousValuesSubscription>() => T;
}

export interface DiagnosisCodePreviousValues {
  id: ID_Output;
  code: String;
  name: String;
  description?: String;
}

export interface DiagnosisCodePreviousValuesPromise
  extends Promise<DiagnosisCodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface DiagnosisCodePreviousValuesSubscription
  extends Promise<AsyncIterator<DiagnosisCodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface MemberSubscriptionPayload {
  mutation: MutationType;
  node: Member;
  updatedFields: String[];
  previousValues: MemberPreviousValues;
}

export interface MemberSubscriptionPayloadPromise
  extends Promise<MemberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MemberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MemberPreviousValuesPromise>() => T;
}

export interface MemberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MemberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MemberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MemberPreviousValuesSubscription>() => T;
}

export interface MemberPreviousValues {
  id: ID_Output;
  name: String;
  status?: MemberStatus;
  email?: String;
  phone?: String;
  birthDate: DateTimeOutput;
  deathDate?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MemberPreviousValuesPromise
  extends Promise<MemberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  status: () => Promise<MemberStatus>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  birthDate: () => Promise<DateTimeOutput>;
  deathDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MemberPreviousValuesSubscription
  extends Promise<AsyncIterator<MemberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<MemberStatus>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  birthDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  deathDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProviderSubscriptionPayload {
  mutation: MutationType;
  node: Provider;
  updatedFields: String[];
  previousValues: ProviderPreviousValues;
}

export interface ProviderSubscriptionPayloadPromise
  extends Promise<ProviderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProviderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProviderPreviousValuesPromise>() => T;
}

export interface ProviderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProviderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProviderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProviderPreviousValuesSubscription>() => T;
}

export interface ProviderPreviousValues {
  id: ID_Output;
  name: String;
  status: ProviderStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProviderPreviousValuesPromise
  extends Promise<ProviderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  status: () => Promise<ProviderStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProviderPreviousValuesSubscription
  extends Promise<AsyncIterator<ProviderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<ProviderStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email?: String;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Member",
    embedded: false
  },
  {
    name: "MemberStatus",
    embedded: false
  },
  {
    name: "Address",
    embedded: false
  },
  {
    name: "AddressType",
    embedded: false
  },
  {
    name: "Provider",
    embedded: false
  },
  {
    name: "ProviderStatus",
    embedded: false
  },
  {
    name: "Authorization",
    embedded: false
  },
  {
    name: "AuthorizationType",
    embedded: false
  },
  {
    name: "AuthorizationStatus",
    embedded: false
  },
  {
    name: "DiagnosisCode",
    embedded: false
  },
  {
    name: "AuthorizationDecision",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://us1.prisma.sh/devoted-health/frontend-interview-api/dev`
});
export const prisma = new Prisma();
