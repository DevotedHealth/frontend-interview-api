/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      Member: MemberObject
      Address: AddressObject
      Provider: ProviderObject
      MemberConnection: MemberConnectionObject
      MemberEdge: MemberEdgeObject
      AggregateMember: AggregateMemberObject
      AddressConnection: AddressConnectionObject
      AddressEdge: AddressEdgeObject
      AggregateAddress: AggregateAddressObject
      ProviderConnection: ProviderConnectionObject
      ProviderEdge: ProviderEdgeObject
      AggregateProvider: AggregateProviderObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      MemberSubscriptionPayload: MemberSubscriptionPayloadObject
      MemberPreviousValues: MemberPreviousValuesObject
      AddressSubscriptionPayload: AddressSubscriptionPayloadObject
      AddressPreviousValues: AddressPreviousValuesObject
      ProviderSubscriptionPayload: ProviderSubscriptionPayloadObject
      ProviderPreviousValues: ProviderPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      Member: MemberFieldDetails
      Address: AddressFieldDetails
      Provider: ProviderFieldDetails
      MemberConnection: MemberConnectionFieldDetails
      MemberEdge: MemberEdgeFieldDetails
      AggregateMember: AggregateMemberFieldDetails
      AddressConnection: AddressConnectionFieldDetails
      AddressEdge: AddressEdgeFieldDetails
      AggregateAddress: AggregateAddressFieldDetails
      ProviderConnection: ProviderConnectionFieldDetails
      ProviderEdge: ProviderEdgeFieldDetails
      AggregateProvider: AggregateProviderFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      MemberSubscriptionPayload: MemberSubscriptionPayloadFieldDetails
      MemberPreviousValues: MemberPreviousValuesFieldDetails
      AddressSubscriptionPayload: AddressSubscriptionPayloadFieldDetails
      AddressPreviousValues: AddressPreviousValuesFieldDetails
      ProviderSubscriptionPayload: ProviderSubscriptionPayloadFieldDetails
      ProviderPreviousValues: ProviderPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      MemberWhereUniqueInput: MemberWhereUniqueInputInputObject
      AddressWhereInput: AddressWhereInputInputObject
      MemberWhereInput: MemberWhereInputInputObject
      ProviderWhereInput: ProviderWhereInputInputObject
      AddressWhereUniqueInput: AddressWhereUniqueInputInputObject
      ProviderWhereUniqueInput: ProviderWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      MemberCreateInput: MemberCreateInputInputObject
      AddressCreateManyWithoutMemberInput: AddressCreateManyWithoutMemberInputInputObject
      AddressCreateWithoutMemberInput: AddressCreateWithoutMemberInputInputObject
      ProviderCreateOneWithoutMembersInput: ProviderCreateOneWithoutMembersInputInputObject
      ProviderCreateWithoutMembersInput: ProviderCreateWithoutMembersInputInputObject
      MemberUpdateInput: MemberUpdateInputInputObject
      AddressUpdateManyWithoutMemberInput: AddressUpdateManyWithoutMemberInputInputObject
      AddressUpdateWithWhereUniqueWithoutMemberInput: AddressUpdateWithWhereUniqueWithoutMemberInputInputObject
      AddressUpdateWithoutMemberDataInput: AddressUpdateWithoutMemberDataInputInputObject
      AddressUpsertWithWhereUniqueWithoutMemberInput: AddressUpsertWithWhereUniqueWithoutMemberInputInputObject
      AddressScalarWhereInput: AddressScalarWhereInputInputObject
      AddressUpdateManyWithWhereNestedInput: AddressUpdateManyWithWhereNestedInputInputObject
      AddressUpdateManyDataInput: AddressUpdateManyDataInputInputObject
      ProviderUpdateOneWithoutMembersInput: ProviderUpdateOneWithoutMembersInputInputObject
      ProviderUpdateWithoutMembersDataInput: ProviderUpdateWithoutMembersDataInputInputObject
      ProviderUpsertWithoutMembersInput: ProviderUpsertWithoutMembersInputInputObject
      MemberUpdateManyMutationInput: MemberUpdateManyMutationInputInputObject
      AddressCreateInput: AddressCreateInputInputObject
      MemberCreateOneWithoutAddressesInput: MemberCreateOneWithoutAddressesInputInputObject
      MemberCreateWithoutAddressesInput: MemberCreateWithoutAddressesInputInputObject
      AddressUpdateInput: AddressUpdateInputInputObject
      MemberUpdateOneRequiredWithoutAddressesInput: MemberUpdateOneRequiredWithoutAddressesInputInputObject
      MemberUpdateWithoutAddressesDataInput: MemberUpdateWithoutAddressesDataInputInputObject
      MemberUpsertWithoutAddressesInput: MemberUpsertWithoutAddressesInputInputObject
      AddressUpdateManyMutationInput: AddressUpdateManyMutationInputInputObject
      ProviderCreateInput: ProviderCreateInputInputObject
      MemberCreateManyWithoutPcpInput: MemberCreateManyWithoutPcpInputInputObject
      MemberCreateWithoutPcpInput: MemberCreateWithoutPcpInputInputObject
      ProviderUpdateInput: ProviderUpdateInputInputObject
      MemberUpdateManyWithoutPcpInput: MemberUpdateManyWithoutPcpInputInputObject
      MemberUpdateWithWhereUniqueWithoutPcpInput: MemberUpdateWithWhereUniqueWithoutPcpInputInputObject
      MemberUpdateWithoutPcpDataInput: MemberUpdateWithoutPcpDataInputInputObject
      MemberUpsertWithWhereUniqueWithoutPcpInput: MemberUpsertWithWhereUniqueWithoutPcpInputInputObject
      MemberScalarWhereInput: MemberScalarWhereInputInputObject
      MemberUpdateManyWithWhereNestedInput: MemberUpdateManyWithWhereNestedInputInputObject
      MemberUpdateManyDataInput: MemberUpdateManyDataInputInputObject
      ProviderUpdateManyMutationInput: ProviderUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      MemberSubscriptionWhereInput: MemberSubscriptionWhereInputInputObject
      AddressSubscriptionWhereInput: AddressSubscriptionWhereInputInputObject
      ProviderSubscriptionWhereInput: ProviderSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    UserOrderByInput: UserOrderByInputValues,
    AddressType: AddressTypeValues,
    MemberStatus: MemberStatusValues,
    ProviderStatus: ProviderStatusValues,
    AddressOrderByInput: AddressOrderByInputValues,
    MemberOrderByInput: MemberOrderByInputValues,
    ProviderOrderByInput: ProviderOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'member', args?: QueryMemberArgs[] | false, alias?: string  } 
  | { name: 'members', args?: QueryMembersArgs[] | false, alias?: string  } 
  | { name: 'membersConnection', args?: QueryMembersConnectionArgs[] | false, alias?: string  } 
  | { name: 'address', args?: QueryAddressArgs[] | false, alias?: string  } 
  | { name: 'addresses', args?: QueryAddressesArgs[] | false, alias?: string  } 
  | { name: 'addressesConnection', args?: QueryAddressesConnectionArgs[] | false, alias?: string  } 
  | { name: 'provider', args?: QueryProviderArgs[] | false, alias?: string  } 
  | { name: 'providers', args?: QueryProvidersArgs[] | false, alias?: string  } 
  | { name: 'providersConnection', args?: QueryProvidersConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'member'
  | 'members'
  | 'membersConnection'
  | 'address'
  | 'addresses'
  | 'addressesConnection'
  | 'provider'
  | 'providers'
  | 'providersConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMemberArgs =
  | 'where'
type QueryMembersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMembersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAddressArgs =
  | 'where'
type QueryAddressesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAddressesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProviderArgs =
  | 'where'
type QueryProvidersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProvidersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  member: {
    type: 'Member'
    args: Record<QueryMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MemberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member | null> | prisma.Member | null
  }
  members: {
    type: 'Member'
    args: Record<QueryMembersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MemberWhereInput | null, orderBy?: prisma.MemberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member[]> | prisma.Member[]
  }
  membersConnection: {
    type: 'MemberConnection'
    args: Record<QueryMembersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MemberWhereInput | null, orderBy?: prisma.MemberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MemberConnection> | prisma.MemberConnection
  }
  address: {
    type: 'Address'
    args: Record<QueryAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AddressWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  addresses: {
    type: 'Address'
    args: Record<QueryAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AddressWhereInput | null, orderBy?: prisma.AddressOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address[]> | prisma.Address[]
  }
  addressesConnection: {
    type: 'AddressConnection'
    args: Record<QueryAddressesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AddressWhereInput | null, orderBy?: prisma.AddressOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AddressConnection> | prisma.AddressConnection
  }
  provider: {
    type: 'Provider'
    args: Record<QueryProviderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProviderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Provider | null> | prisma.Provider | null
  }
  providers: {
    type: 'Provider'
    args: Record<QueryProvidersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProviderWhereInput | null, orderBy?: prisma.ProviderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Provider[]> | prisma.Provider[]
  }
  providersConnection: {
    type: 'ProviderConnection'
    args: Record<QueryProvidersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProviderWhereInput | null, orderBy?: prisma.ProviderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProviderConnection> | prisma.ProviderConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Member

type MemberObject =
  | MemberFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'addresses', args?: MemberAddressesArgs[] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'pcp', args?: [] | false, alias?: string  } 
  | { name: 'birthDate', args?: [] | false, alias?: string  } 
  | { name: 'deathDate', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type MemberFields =
  | 'id'
  | 'name'
  | 'addresses'
  | 'status'
  | 'email'
  | 'phone'
  | 'pcp'
  | 'birthDate'
  | 'deathDate'
  | 'createdAt'
  | 'updatedAt'


type MemberAddressesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface MemberFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  addresses: {
    type: 'Address'
    args: Record<MemberAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Member">,
      args: { where?: AddressWhereInput | null, orderBy?: prisma.AddressOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address[]> | prisma.Address[]
  }
  status: {
    type: 'MemberStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Member">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MemberStatus | null> | prisma.MemberStatus | null
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  phone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  pcp: {
    type: 'Provider'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Member">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Provider | null> | prisma.Provider | null
  }
  birthDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  deathDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Address

type AddressObject =
  | AddressFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'address1', args?: [] | false, alias?: string  } 
  | { name: 'address2', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'zip', args?: [] | false, alias?: string  } 
  | { name: 'effectiveStartDate', args?: [] | false, alias?: string  } 
  | { name: 'effectiveEndDate', args?: [] | false, alias?: string  } 
  | { name: 'member', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type AddressFields =
  | 'id'
  | 'type'
  | 'address1'
  | 'address2'
  | 'city'
  | 'state'
  | 'country'
  | 'zip'
  | 'effectiveStartDate'
  | 'effectiveEndDate'
  | 'member'
  | 'createdAt'
  | 'updatedAt'



  

export interface AddressFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'AddressType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Address">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AddressType | null> | prisma.AddressType | null
  }
  address1: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  address2: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  state: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  zip: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  effectiveStartDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  effectiveEndDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  member: {
    type: 'Member'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Address">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member> | prisma.Member
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Provider

type ProviderObject =
  | ProviderFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'members', args?: ProviderMembersArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProviderFields =
  | 'id'
  | 'name'
  | 'status'
  | 'members'
  | 'createdAt'
  | 'updatedAt'


type ProviderMembersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProviderFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'ProviderStatus'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Provider">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProviderStatus> | prisma.ProviderStatus
  }
  members: {
    type: 'Member'
    args: Record<ProviderMembersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Provider">,
      args: { where?: MemberWhereInput | null, orderBy?: prisma.MemberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member[]> | prisma.Member[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MemberConnection

type MemberConnectionObject =
  | MemberConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MemberConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MemberConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MemberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MemberEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MemberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MemberEdge[]> | prisma.MemberEdge[]
  }
  aggregate: {
    type: 'AggregateMember'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MemberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMember> | prisma.AggregateMember
  }
}
  

// Types for MemberEdge

type MemberEdgeObject =
  | MemberEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MemberEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MemberEdgeFieldDetails {
  node: {
    type: 'Member'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MemberEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member> | prisma.Member
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMember

type AggregateMemberObject =
  | AggregateMemberFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMemberFields =
  | 'count'



  

export interface AggregateMemberFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AddressConnection

type AddressConnectionObject =
  | AddressConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AddressConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AddressConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AddressConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AddressEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AddressConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AddressEdge[]> | prisma.AddressEdge[]
  }
  aggregate: {
    type: 'AggregateAddress'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AddressConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAddress> | prisma.AggregateAddress
  }
}
  

// Types for AddressEdge

type AddressEdgeObject =
  | AddressEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AddressEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AddressEdgeFieldDetails {
  node: {
    type: 'Address'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AddressEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address> | prisma.Address
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAddress

type AggregateAddressObject =
  | AggregateAddressFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAddressFields =
  | 'count'



  

export interface AggregateAddressFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProviderConnection

type ProviderConnectionObject =
  | ProviderConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProviderConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProviderConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProviderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProviderEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProviderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProviderEdge[]> | prisma.ProviderEdge[]
  }
  aggregate: {
    type: 'AggregateProvider'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProviderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProvider> | prisma.AggregateProvider
  }
}
  

// Types for ProviderEdge

type ProviderEdgeObject =
  | ProviderEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProviderEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProviderEdgeFieldDetails {
  node: {
    type: 'Provider'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProviderEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Provider> | prisma.Provider
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProvider

type AggregateProviderObject =
  | AggregateProviderFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProviderFields =
  | 'count'



  

export interface AggregateProviderFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createMember', args?: MutationCreateMemberArgs[] | false, alias?: string  } 
  | { name: 'updateMember', args?: MutationUpdateMemberArgs[] | false, alias?: string  } 
  | { name: 'updateManyMembers', args?: MutationUpdateManyMembersArgs[] | false, alias?: string  } 
  | { name: 'upsertMember', args?: MutationUpsertMemberArgs[] | false, alias?: string  } 
  | { name: 'deleteMember', args?: MutationDeleteMemberArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMembers', args?: MutationDeleteManyMembersArgs[] | false, alias?: string  } 
  | { name: 'createAddress', args?: MutationCreateAddressArgs[] | false, alias?: string  } 
  | { name: 'updateAddress', args?: MutationUpdateAddressArgs[] | false, alias?: string  } 
  | { name: 'updateManyAddresses', args?: MutationUpdateManyAddressesArgs[] | false, alias?: string  } 
  | { name: 'upsertAddress', args?: MutationUpsertAddressArgs[] | false, alias?: string  } 
  | { name: 'deleteAddress', args?: MutationDeleteAddressArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAddresses', args?: MutationDeleteManyAddressesArgs[] | false, alias?: string  } 
  | { name: 'createProvider', args?: MutationCreateProviderArgs[] | false, alias?: string  } 
  | { name: 'updateProvider', args?: MutationUpdateProviderArgs[] | false, alias?: string  } 
  | { name: 'updateManyProviders', args?: MutationUpdateManyProvidersArgs[] | false, alias?: string  } 
  | { name: 'upsertProvider', args?: MutationUpsertProviderArgs[] | false, alias?: string  } 
  | { name: 'deleteProvider', args?: MutationDeleteProviderArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProviders', args?: MutationDeleteManyProvidersArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createMember'
  | 'updateMember'
  | 'updateManyMembers'
  | 'upsertMember'
  | 'deleteMember'
  | 'deleteManyMembers'
  | 'createAddress'
  | 'updateAddress'
  | 'updateManyAddresses'
  | 'upsertAddress'
  | 'deleteAddress'
  | 'deleteManyAddresses'
  | 'createProvider'
  | 'updateProvider'
  | 'updateManyProviders'
  | 'upsertProvider'
  | 'deleteProvider'
  | 'deleteManyProviders'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateMemberArgs =
  | 'data'
type MutationUpdateMemberArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMembersArgs =
  | 'data'
  | 'where'
type MutationUpsertMemberArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMemberArgs =
  | 'where'
type MutationDeleteManyMembersArgs =
  | 'where'
type MutationCreateAddressArgs =
  | 'data'
type MutationUpdateAddressArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAddressesArgs =
  | 'data'
  | 'where'
type MutationUpsertAddressArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAddressArgs =
  | 'where'
type MutationDeleteManyAddressesArgs =
  | 'where'
type MutationCreateProviderArgs =
  | 'data'
type MutationUpdateProviderArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProvidersArgs =
  | 'data'
  | 'where'
type MutationUpsertProviderArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProviderArgs =
  | 'where'
type MutationDeleteManyProvidersArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMember: {
    type: 'Member'
    args: Record<MutationCreateMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MemberCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member> | prisma.Member
  }
  updateMember: {
    type: 'Member'
    args: Record<MutationUpdateMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MemberUpdateInput, where: MemberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member | null> | prisma.Member | null
  }
  updateManyMembers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMembersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MemberUpdateManyMutationInput, where?: MemberWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMember: {
    type: 'Member'
    args: Record<MutationUpsertMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MemberWhereUniqueInput, create: MemberCreateInput, update: MemberUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member> | prisma.Member
  }
  deleteMember: {
    type: 'Member'
    args: Record<MutationDeleteMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MemberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member | null> | prisma.Member | null
  }
  deleteManyMembers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMembersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MemberWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAddress: {
    type: 'Address'
    args: Record<MutationCreateAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AddressCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address> | prisma.Address
  }
  updateAddress: {
    type: 'Address'
    args: Record<MutationUpdateAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AddressUpdateInput, where: AddressWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  updateManyAddresses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AddressUpdateManyMutationInput, where?: AddressWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAddress: {
    type: 'Address'
    args: Record<MutationUpsertAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AddressWhereUniqueInput, create: AddressCreateInput, update: AddressUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address> | prisma.Address
  }
  deleteAddress: {
    type: 'Address'
    args: Record<MutationDeleteAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AddressWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  deleteManyAddresses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AddressWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProvider: {
    type: 'Provider'
    args: Record<MutationCreateProviderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProviderCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Provider> | prisma.Provider
  }
  updateProvider: {
    type: 'Provider'
    args: Record<MutationUpdateProviderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProviderUpdateInput, where: ProviderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Provider | null> | prisma.Provider | null
  }
  updateManyProviders: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProvidersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProviderUpdateManyMutationInput, where?: ProviderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProvider: {
    type: 'Provider'
    args: Record<MutationUpsertProviderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProviderWhereUniqueInput, create: ProviderCreateInput, update: ProviderUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Provider> | prisma.Provider
  }
  deleteProvider: {
    type: 'Provider'
    args: Record<MutationDeleteProviderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProviderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Provider | null> | prisma.Provider | null
  }
  deleteManyProviders: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProvidersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProviderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'member', args?: SubscriptionMemberArgs[] | false, alias?: string  } 
  | { name: 'address', args?: SubscriptionAddressArgs[] | false, alias?: string  } 
  | { name: 'provider', args?: SubscriptionProviderArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'member'
  | 'address'
  | 'provider'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionMemberArgs =
  | 'where'
type SubscriptionAddressArgs =
  | 'where'
type SubscriptionProviderArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  member: {
    type: 'MemberSubscriptionPayload'
    args: Record<SubscriptionMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MemberSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MemberSubscriptionPayload | null> | prisma.MemberSubscriptionPayload | null
  }
  address: {
    type: 'AddressSubscriptionPayload'
    args: Record<SubscriptionAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AddressSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AddressSubscriptionPayload | null> | prisma.AddressSubscriptionPayload | null
  }
  provider: {
    type: 'ProviderSubscriptionPayload'
    args: Record<SubscriptionProviderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProviderSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProviderSubscriptionPayload | null> | prisma.ProviderSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MemberSubscriptionPayload

type MemberSubscriptionPayloadObject =
  | MemberSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MemberSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MemberSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MemberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Member'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MemberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member | null> | prisma.Member | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MemberPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MemberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MemberPreviousValues | null> | prisma.MemberPreviousValues | null
  }
}
  

// Types for MemberPreviousValues

type MemberPreviousValuesObject =
  | MemberPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'birthDate', args?: [] | false, alias?: string  } 
  | { name: 'deathDate', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type MemberPreviousValuesFields =
  | 'id'
  | 'name'
  | 'status'
  | 'email'
  | 'phone'
  | 'birthDate'
  | 'deathDate'
  | 'createdAt'
  | 'updatedAt'



  

export interface MemberPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'MemberStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MemberPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MemberStatus | null> | prisma.MemberStatus | null
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  phone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  birthDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  deathDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AddressSubscriptionPayload

type AddressSubscriptionPayloadObject =
  | AddressSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AddressSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AddressSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AddressSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Address'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AddressSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AddressPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AddressSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AddressPreviousValues | null> | prisma.AddressPreviousValues | null
  }
}
  

// Types for AddressPreviousValues

type AddressPreviousValuesObject =
  | AddressPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'address1', args?: [] | false, alias?: string  } 
  | { name: 'address2', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'zip', args?: [] | false, alias?: string  } 
  | { name: 'effectiveStartDate', args?: [] | false, alias?: string  } 
  | { name: 'effectiveEndDate', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type AddressPreviousValuesFields =
  | 'id'
  | 'type'
  | 'address1'
  | 'address2'
  | 'city'
  | 'state'
  | 'country'
  | 'zip'
  | 'effectiveStartDate'
  | 'effectiveEndDate'
  | 'createdAt'
  | 'updatedAt'



  

export interface AddressPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'AddressType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AddressPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AddressType | null> | prisma.AddressType | null
  }
  address1: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  address2: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  state: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  zip: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  effectiveStartDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  effectiveEndDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProviderSubscriptionPayload

type ProviderSubscriptionPayloadObject =
  | ProviderSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProviderSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProviderSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProviderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Provider'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProviderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Provider | null> | prisma.Provider | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProviderPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProviderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProviderPreviousValues | null> | prisma.ProviderPreviousValues | null
  }
}
  

// Types for ProviderPreviousValues

type ProviderPreviousValuesObject =
  | ProviderPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProviderPreviousValuesFields =
  | 'id'
  | 'name'
  | 'status'
  | 'createdAt'
  | 'updatedAt'



  

export interface ProviderPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'ProviderStatus'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProviderPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProviderStatus> | prisma.ProviderStatus
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MemberWhereUniqueInput {
  id?: string | null
}
export type MemberWhereUniqueInputInputObject =
  | Extract<keyof MemberWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AddressWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  type?: prisma.AddressType | null
  type_not?: prisma.AddressType | null
  type_in?: prisma.AddressType[]
  type_not_in?: prisma.AddressType[]
  address1?: string | null
  address1_not?: string | null
  address1_in?: string[]
  address1_not_in?: string[]
  address1_lt?: string | null
  address1_lte?: string | null
  address1_gt?: string | null
  address1_gte?: string | null
  address1_contains?: string | null
  address1_not_contains?: string | null
  address1_starts_with?: string | null
  address1_not_starts_with?: string | null
  address1_ends_with?: string | null
  address1_not_ends_with?: string | null
  address2?: string | null
  address2_not?: string | null
  address2_in?: string[]
  address2_not_in?: string[]
  address2_lt?: string | null
  address2_lte?: string | null
  address2_gt?: string | null
  address2_gte?: string | null
  address2_contains?: string | null
  address2_not_contains?: string | null
  address2_starts_with?: string | null
  address2_not_starts_with?: string | null
  address2_ends_with?: string | null
  address2_not_ends_with?: string | null
  city?: string | null
  city_not?: string | null
  city_in?: string[]
  city_not_in?: string[]
  city_lt?: string | null
  city_lte?: string | null
  city_gt?: string | null
  city_gte?: string | null
  city_contains?: string | null
  city_not_contains?: string | null
  city_starts_with?: string | null
  city_not_starts_with?: string | null
  city_ends_with?: string | null
  city_not_ends_with?: string | null
  state?: string | null
  state_not?: string | null
  state_in?: string[]
  state_not_in?: string[]
  state_lt?: string | null
  state_lte?: string | null
  state_gt?: string | null
  state_gte?: string | null
  state_contains?: string | null
  state_not_contains?: string | null
  state_starts_with?: string | null
  state_not_starts_with?: string | null
  state_ends_with?: string | null
  state_not_ends_with?: string | null
  country?: string | null
  country_not?: string | null
  country_in?: string[]
  country_not_in?: string[]
  country_lt?: string | null
  country_lte?: string | null
  country_gt?: string | null
  country_gte?: string | null
  country_contains?: string | null
  country_not_contains?: string | null
  country_starts_with?: string | null
  country_not_starts_with?: string | null
  country_ends_with?: string | null
  country_not_ends_with?: string | null
  zip?: string | null
  zip_not?: string | null
  zip_in?: string[]
  zip_not_in?: string[]
  zip_lt?: string | null
  zip_lte?: string | null
  zip_gt?: string | null
  zip_gte?: string | null
  zip_contains?: string | null
  zip_not_contains?: string | null
  zip_starts_with?: string | null
  zip_not_starts_with?: string | null
  zip_ends_with?: string | null
  zip_not_ends_with?: string | null
  effectiveStartDate?: string | null
  effectiveStartDate_not?: string | null
  effectiveStartDate_in?: string[]
  effectiveStartDate_not_in?: string[]
  effectiveStartDate_lt?: string | null
  effectiveStartDate_lte?: string | null
  effectiveStartDate_gt?: string | null
  effectiveStartDate_gte?: string | null
  effectiveEndDate?: string | null
  effectiveEndDate_not?: string | null
  effectiveEndDate_in?: string[]
  effectiveEndDate_not_in?: string[]
  effectiveEndDate_lt?: string | null
  effectiveEndDate_lte?: string | null
  effectiveEndDate_gt?: string | null
  effectiveEndDate_gte?: string | null
  member?: MemberWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: AddressWhereInput[]
  OR?: AddressWhereInput[]
  NOT?: AddressWhereInput[]
}
export type AddressWhereInputInputObject =
  | Extract<keyof AddressWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address1_not', alias?: string  } 
  | { name: 'address1_in', alias?: string  } 
  | { name: 'address1_not_in', alias?: string  } 
  | { name: 'address1_lt', alias?: string  } 
  | { name: 'address1_lte', alias?: string  } 
  | { name: 'address1_gt', alias?: string  } 
  | { name: 'address1_gte', alias?: string  } 
  | { name: 'address1_contains', alias?: string  } 
  | { name: 'address1_not_contains', alias?: string  } 
  | { name: 'address1_starts_with', alias?: string  } 
  | { name: 'address1_not_starts_with', alias?: string  } 
  | { name: 'address1_ends_with', alias?: string  } 
  | { name: 'address1_not_ends_with', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'address2_not', alias?: string  } 
  | { name: 'address2_in', alias?: string  } 
  | { name: 'address2_not_in', alias?: string  } 
  | { name: 'address2_lt', alias?: string  } 
  | { name: 'address2_lte', alias?: string  } 
  | { name: 'address2_gt', alias?: string  } 
  | { name: 'address2_gte', alias?: string  } 
  | { name: 'address2_contains', alias?: string  } 
  | { name: 'address2_not_contains', alias?: string  } 
  | { name: 'address2_starts_with', alias?: string  } 
  | { name: 'address2_not_starts_with', alias?: string  } 
  | { name: 'address2_ends_with', alias?: string  } 
  | { name: 'address2_not_ends_with', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'city_not', alias?: string  } 
  | { name: 'city_in', alias?: string  } 
  | { name: 'city_not_in', alias?: string  } 
  | { name: 'city_lt', alias?: string  } 
  | { name: 'city_lte', alias?: string  } 
  | { name: 'city_gt', alias?: string  } 
  | { name: 'city_gte', alias?: string  } 
  | { name: 'city_contains', alias?: string  } 
  | { name: 'city_not_contains', alias?: string  } 
  | { name: 'city_starts_with', alias?: string  } 
  | { name: 'city_not_starts_with', alias?: string  } 
  | { name: 'city_ends_with', alias?: string  } 
  | { name: 'city_not_ends_with', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'state_not', alias?: string  } 
  | { name: 'state_in', alias?: string  } 
  | { name: 'state_not_in', alias?: string  } 
  | { name: 'state_lt', alias?: string  } 
  | { name: 'state_lte', alias?: string  } 
  | { name: 'state_gt', alias?: string  } 
  | { name: 'state_gte', alias?: string  } 
  | { name: 'state_contains', alias?: string  } 
  | { name: 'state_not_contains', alias?: string  } 
  | { name: 'state_starts_with', alias?: string  } 
  | { name: 'state_not_starts_with', alias?: string  } 
  | { name: 'state_ends_with', alias?: string  } 
  | { name: 'state_not_ends_with', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'country_not', alias?: string  } 
  | { name: 'country_in', alias?: string  } 
  | { name: 'country_not_in', alias?: string  } 
  | { name: 'country_lt', alias?: string  } 
  | { name: 'country_lte', alias?: string  } 
  | { name: 'country_gt', alias?: string  } 
  | { name: 'country_gte', alias?: string  } 
  | { name: 'country_contains', alias?: string  } 
  | { name: 'country_not_contains', alias?: string  } 
  | { name: 'country_starts_with', alias?: string  } 
  | { name: 'country_not_starts_with', alias?: string  } 
  | { name: 'country_ends_with', alias?: string  } 
  | { name: 'country_not_ends_with', alias?: string  } 
  | { name: 'zip', alias?: string  } 
  | { name: 'zip_not', alias?: string  } 
  | { name: 'zip_in', alias?: string  } 
  | { name: 'zip_not_in', alias?: string  } 
  | { name: 'zip_lt', alias?: string  } 
  | { name: 'zip_lte', alias?: string  } 
  | { name: 'zip_gt', alias?: string  } 
  | { name: 'zip_gte', alias?: string  } 
  | { name: 'zip_contains', alias?: string  } 
  | { name: 'zip_not_contains', alias?: string  } 
  | { name: 'zip_starts_with', alias?: string  } 
  | { name: 'zip_not_starts_with', alias?: string  } 
  | { name: 'zip_ends_with', alias?: string  } 
  | { name: 'zip_not_ends_with', alias?: string  } 
  | { name: 'effectiveStartDate', alias?: string  } 
  | { name: 'effectiveStartDate_not', alias?: string  } 
  | { name: 'effectiveStartDate_in', alias?: string  } 
  | { name: 'effectiveStartDate_not_in', alias?: string  } 
  | { name: 'effectiveStartDate_lt', alias?: string  } 
  | { name: 'effectiveStartDate_lte', alias?: string  } 
  | { name: 'effectiveStartDate_gt', alias?: string  } 
  | { name: 'effectiveStartDate_gte', alias?: string  } 
  | { name: 'effectiveEndDate', alias?: string  } 
  | { name: 'effectiveEndDate_not', alias?: string  } 
  | { name: 'effectiveEndDate_in', alias?: string  } 
  | { name: 'effectiveEndDate_not_in', alias?: string  } 
  | { name: 'effectiveEndDate_lt', alias?: string  } 
  | { name: 'effectiveEndDate_lte', alias?: string  } 
  | { name: 'effectiveEndDate_gt', alias?: string  } 
  | { name: 'effectiveEndDate_gte', alias?: string  } 
  | { name: 'member', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MemberWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  addresses_every?: AddressWhereInput | null
  addresses_some?: AddressWhereInput | null
  addresses_none?: AddressWhereInput | null
  status?: prisma.MemberStatus | null
  status_not?: prisma.MemberStatus | null
  status_in?: prisma.MemberStatus[]
  status_not_in?: prisma.MemberStatus[]
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  phone?: string | null
  phone_not?: string | null
  phone_in?: string[]
  phone_not_in?: string[]
  phone_lt?: string | null
  phone_lte?: string | null
  phone_gt?: string | null
  phone_gte?: string | null
  phone_contains?: string | null
  phone_not_contains?: string | null
  phone_starts_with?: string | null
  phone_not_starts_with?: string | null
  phone_ends_with?: string | null
  phone_not_ends_with?: string | null
  pcp?: ProviderWhereInput | null
  birthDate?: string | null
  birthDate_not?: string | null
  birthDate_in?: string[]
  birthDate_not_in?: string[]
  birthDate_lt?: string | null
  birthDate_lte?: string | null
  birthDate_gt?: string | null
  birthDate_gte?: string | null
  deathDate?: string | null
  deathDate_not?: string | null
  deathDate_in?: string[]
  deathDate_not_in?: string[]
  deathDate_lt?: string | null
  deathDate_lte?: string | null
  deathDate_gt?: string | null
  deathDate_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: MemberWhereInput[]
  OR?: MemberWhereInput[]
  NOT?: MemberWhereInput[]
}
export type MemberWhereInputInputObject =
  | Extract<keyof MemberWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'addresses_every', alias?: string  } 
  | { name: 'addresses_some', alias?: string  } 
  | { name: 'addresses_none', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'phone_not', alias?: string  } 
  | { name: 'phone_in', alias?: string  } 
  | { name: 'phone_not_in', alias?: string  } 
  | { name: 'phone_lt', alias?: string  } 
  | { name: 'phone_lte', alias?: string  } 
  | { name: 'phone_gt', alias?: string  } 
  | { name: 'phone_gte', alias?: string  } 
  | { name: 'phone_contains', alias?: string  } 
  | { name: 'phone_not_contains', alias?: string  } 
  | { name: 'phone_starts_with', alias?: string  } 
  | { name: 'phone_not_starts_with', alias?: string  } 
  | { name: 'phone_ends_with', alias?: string  } 
  | { name: 'phone_not_ends_with', alias?: string  } 
  | { name: 'pcp', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'birthDate_not', alias?: string  } 
  | { name: 'birthDate_in', alias?: string  } 
  | { name: 'birthDate_not_in', alias?: string  } 
  | { name: 'birthDate_lt', alias?: string  } 
  | { name: 'birthDate_lte', alias?: string  } 
  | { name: 'birthDate_gt', alias?: string  } 
  | { name: 'birthDate_gte', alias?: string  } 
  | { name: 'deathDate', alias?: string  } 
  | { name: 'deathDate_not', alias?: string  } 
  | { name: 'deathDate_in', alias?: string  } 
  | { name: 'deathDate_not_in', alias?: string  } 
  | { name: 'deathDate_lt', alias?: string  } 
  | { name: 'deathDate_lte', alias?: string  } 
  | { name: 'deathDate_gt', alias?: string  } 
  | { name: 'deathDate_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProviderWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  status?: prisma.ProviderStatus | null
  status_not?: prisma.ProviderStatus | null
  status_in?: prisma.ProviderStatus[]
  status_not_in?: prisma.ProviderStatus[]
  members_every?: MemberWhereInput | null
  members_some?: MemberWhereInput | null
  members_none?: MemberWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProviderWhereInput[]
  OR?: ProviderWhereInput[]
  NOT?: ProviderWhereInput[]
}
export type ProviderWhereInputInputObject =
  | Extract<keyof ProviderWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'members_every', alias?: string  } 
  | { name: 'members_some', alias?: string  } 
  | { name: 'members_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AddressWhereUniqueInput {
  id?: string | null
}
export type AddressWhereUniqueInputInputObject =
  | Extract<keyof AddressWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProviderWhereUniqueInput {
  id?: string | null
}
export type ProviderWhereUniqueInputInputObject =
  | Extract<keyof ProviderWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  email?: string | null
  name?: string
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  name?: string | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  name?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface MemberCreateInput {
  id?: string | null
  name?: string
  addresses?: AddressCreateManyWithoutMemberInput | null
  status?: prisma.MemberStatus | null
  email?: string | null
  phone?: string | null
  pcp?: ProviderCreateOneWithoutMembersInput | null
  birthDate?: string
  deathDate?: string | null
}
export type MemberCreateInputInputObject =
  | Extract<keyof MemberCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'addresses', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'pcp', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'deathDate', alias?: string  } 
  
export interface AddressCreateManyWithoutMemberInput {
  create?: AddressCreateWithoutMemberInput[]
  connect?: AddressWhereUniqueInput[]
}
export type AddressCreateManyWithoutMemberInputInputObject =
  | Extract<keyof AddressCreateManyWithoutMemberInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AddressCreateWithoutMemberInput {
  id?: string | null
  type?: prisma.AddressType | null
  address1?: string
  address2?: string | null
  city?: string | null
  state?: string | null
  country?: string | null
  zip?: string | null
  effectiveStartDate?: string | null
  effectiveEndDate?: string | null
}
export type AddressCreateWithoutMemberInputInputObject =
  | Extract<keyof AddressCreateWithoutMemberInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'zip', alias?: string  } 
  | { name: 'effectiveStartDate', alias?: string  } 
  | { name: 'effectiveEndDate', alias?: string  } 
  
export interface ProviderCreateOneWithoutMembersInput {
  create?: ProviderCreateWithoutMembersInput | null
  connect?: ProviderWhereUniqueInput | null
}
export type ProviderCreateOneWithoutMembersInputInputObject =
  | Extract<keyof ProviderCreateOneWithoutMembersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProviderCreateWithoutMembersInput {
  id?: string | null
  name?: string
  status?: prisma.ProviderStatus
}
export type ProviderCreateWithoutMembersInputInputObject =
  | Extract<keyof ProviderCreateWithoutMembersInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface MemberUpdateInput {
  name?: string | null
  addresses?: AddressUpdateManyWithoutMemberInput | null
  status?: prisma.MemberStatus | null
  email?: string | null
  phone?: string | null
  pcp?: ProviderUpdateOneWithoutMembersInput | null
  birthDate?: string | null
  deathDate?: string | null
}
export type MemberUpdateInputInputObject =
  | Extract<keyof MemberUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'addresses', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'pcp', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'deathDate', alias?: string  } 
  
export interface AddressUpdateManyWithoutMemberInput {
  create?: AddressCreateWithoutMemberInput[]
  delete?: AddressWhereUniqueInput[]
  connect?: AddressWhereUniqueInput[]
  set?: AddressWhereUniqueInput[]
  disconnect?: AddressWhereUniqueInput[]
  update?: AddressUpdateWithWhereUniqueWithoutMemberInput[]
  upsert?: AddressUpsertWithWhereUniqueWithoutMemberInput[]
  deleteMany?: AddressScalarWhereInput[]
  updateMany?: AddressUpdateManyWithWhereNestedInput[]
}
export type AddressUpdateManyWithoutMemberInputInputObject =
  | Extract<keyof AddressUpdateManyWithoutMemberInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AddressUpdateWithWhereUniqueWithoutMemberInput {
  where?: AddressWhereUniqueInput
  data?: AddressUpdateWithoutMemberDataInput
}
export type AddressUpdateWithWhereUniqueWithoutMemberInputInputObject =
  | Extract<keyof AddressUpdateWithWhereUniqueWithoutMemberInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AddressUpdateWithoutMemberDataInput {
  type?: prisma.AddressType | null
  address1?: string | null
  address2?: string | null
  city?: string | null
  state?: string | null
  country?: string | null
  zip?: string | null
  effectiveStartDate?: string | null
  effectiveEndDate?: string | null
}
export type AddressUpdateWithoutMemberDataInputInputObject =
  | Extract<keyof AddressUpdateWithoutMemberDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'zip', alias?: string  } 
  | { name: 'effectiveStartDate', alias?: string  } 
  | { name: 'effectiveEndDate', alias?: string  } 
  
export interface AddressUpsertWithWhereUniqueWithoutMemberInput {
  where?: AddressWhereUniqueInput
  update?: AddressUpdateWithoutMemberDataInput
  create?: AddressCreateWithoutMemberInput
}
export type AddressUpsertWithWhereUniqueWithoutMemberInputInputObject =
  | Extract<keyof AddressUpsertWithWhereUniqueWithoutMemberInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AddressScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  type?: prisma.AddressType | null
  type_not?: prisma.AddressType | null
  type_in?: prisma.AddressType[]
  type_not_in?: prisma.AddressType[]
  address1?: string | null
  address1_not?: string | null
  address1_in?: string[]
  address1_not_in?: string[]
  address1_lt?: string | null
  address1_lte?: string | null
  address1_gt?: string | null
  address1_gte?: string | null
  address1_contains?: string | null
  address1_not_contains?: string | null
  address1_starts_with?: string | null
  address1_not_starts_with?: string | null
  address1_ends_with?: string | null
  address1_not_ends_with?: string | null
  address2?: string | null
  address2_not?: string | null
  address2_in?: string[]
  address2_not_in?: string[]
  address2_lt?: string | null
  address2_lte?: string | null
  address2_gt?: string | null
  address2_gte?: string | null
  address2_contains?: string | null
  address2_not_contains?: string | null
  address2_starts_with?: string | null
  address2_not_starts_with?: string | null
  address2_ends_with?: string | null
  address2_not_ends_with?: string | null
  city?: string | null
  city_not?: string | null
  city_in?: string[]
  city_not_in?: string[]
  city_lt?: string | null
  city_lte?: string | null
  city_gt?: string | null
  city_gte?: string | null
  city_contains?: string | null
  city_not_contains?: string | null
  city_starts_with?: string | null
  city_not_starts_with?: string | null
  city_ends_with?: string | null
  city_not_ends_with?: string | null
  state?: string | null
  state_not?: string | null
  state_in?: string[]
  state_not_in?: string[]
  state_lt?: string | null
  state_lte?: string | null
  state_gt?: string | null
  state_gte?: string | null
  state_contains?: string | null
  state_not_contains?: string | null
  state_starts_with?: string | null
  state_not_starts_with?: string | null
  state_ends_with?: string | null
  state_not_ends_with?: string | null
  country?: string | null
  country_not?: string | null
  country_in?: string[]
  country_not_in?: string[]
  country_lt?: string | null
  country_lte?: string | null
  country_gt?: string | null
  country_gte?: string | null
  country_contains?: string | null
  country_not_contains?: string | null
  country_starts_with?: string | null
  country_not_starts_with?: string | null
  country_ends_with?: string | null
  country_not_ends_with?: string | null
  zip?: string | null
  zip_not?: string | null
  zip_in?: string[]
  zip_not_in?: string[]
  zip_lt?: string | null
  zip_lte?: string | null
  zip_gt?: string | null
  zip_gte?: string | null
  zip_contains?: string | null
  zip_not_contains?: string | null
  zip_starts_with?: string | null
  zip_not_starts_with?: string | null
  zip_ends_with?: string | null
  zip_not_ends_with?: string | null
  effectiveStartDate?: string | null
  effectiveStartDate_not?: string | null
  effectiveStartDate_in?: string[]
  effectiveStartDate_not_in?: string[]
  effectiveStartDate_lt?: string | null
  effectiveStartDate_lte?: string | null
  effectiveStartDate_gt?: string | null
  effectiveStartDate_gte?: string | null
  effectiveEndDate?: string | null
  effectiveEndDate_not?: string | null
  effectiveEndDate_in?: string[]
  effectiveEndDate_not_in?: string[]
  effectiveEndDate_lt?: string | null
  effectiveEndDate_lte?: string | null
  effectiveEndDate_gt?: string | null
  effectiveEndDate_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: AddressScalarWhereInput[]
  OR?: AddressScalarWhereInput[]
  NOT?: AddressScalarWhereInput[]
}
export type AddressScalarWhereInputInputObject =
  | Extract<keyof AddressScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address1_not', alias?: string  } 
  | { name: 'address1_in', alias?: string  } 
  | { name: 'address1_not_in', alias?: string  } 
  | { name: 'address1_lt', alias?: string  } 
  | { name: 'address1_lte', alias?: string  } 
  | { name: 'address1_gt', alias?: string  } 
  | { name: 'address1_gte', alias?: string  } 
  | { name: 'address1_contains', alias?: string  } 
  | { name: 'address1_not_contains', alias?: string  } 
  | { name: 'address1_starts_with', alias?: string  } 
  | { name: 'address1_not_starts_with', alias?: string  } 
  | { name: 'address1_ends_with', alias?: string  } 
  | { name: 'address1_not_ends_with', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'address2_not', alias?: string  } 
  | { name: 'address2_in', alias?: string  } 
  | { name: 'address2_not_in', alias?: string  } 
  | { name: 'address2_lt', alias?: string  } 
  | { name: 'address2_lte', alias?: string  } 
  | { name: 'address2_gt', alias?: string  } 
  | { name: 'address2_gte', alias?: string  } 
  | { name: 'address2_contains', alias?: string  } 
  | { name: 'address2_not_contains', alias?: string  } 
  | { name: 'address2_starts_with', alias?: string  } 
  | { name: 'address2_not_starts_with', alias?: string  } 
  | { name: 'address2_ends_with', alias?: string  } 
  | { name: 'address2_not_ends_with', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'city_not', alias?: string  } 
  | { name: 'city_in', alias?: string  } 
  | { name: 'city_not_in', alias?: string  } 
  | { name: 'city_lt', alias?: string  } 
  | { name: 'city_lte', alias?: string  } 
  | { name: 'city_gt', alias?: string  } 
  | { name: 'city_gte', alias?: string  } 
  | { name: 'city_contains', alias?: string  } 
  | { name: 'city_not_contains', alias?: string  } 
  | { name: 'city_starts_with', alias?: string  } 
  | { name: 'city_not_starts_with', alias?: string  } 
  | { name: 'city_ends_with', alias?: string  } 
  | { name: 'city_not_ends_with', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'state_not', alias?: string  } 
  | { name: 'state_in', alias?: string  } 
  | { name: 'state_not_in', alias?: string  } 
  | { name: 'state_lt', alias?: string  } 
  | { name: 'state_lte', alias?: string  } 
  | { name: 'state_gt', alias?: string  } 
  | { name: 'state_gte', alias?: string  } 
  | { name: 'state_contains', alias?: string  } 
  | { name: 'state_not_contains', alias?: string  } 
  | { name: 'state_starts_with', alias?: string  } 
  | { name: 'state_not_starts_with', alias?: string  } 
  | { name: 'state_ends_with', alias?: string  } 
  | { name: 'state_not_ends_with', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'country_not', alias?: string  } 
  | { name: 'country_in', alias?: string  } 
  | { name: 'country_not_in', alias?: string  } 
  | { name: 'country_lt', alias?: string  } 
  | { name: 'country_lte', alias?: string  } 
  | { name: 'country_gt', alias?: string  } 
  | { name: 'country_gte', alias?: string  } 
  | { name: 'country_contains', alias?: string  } 
  | { name: 'country_not_contains', alias?: string  } 
  | { name: 'country_starts_with', alias?: string  } 
  | { name: 'country_not_starts_with', alias?: string  } 
  | { name: 'country_ends_with', alias?: string  } 
  | { name: 'country_not_ends_with', alias?: string  } 
  | { name: 'zip', alias?: string  } 
  | { name: 'zip_not', alias?: string  } 
  | { name: 'zip_in', alias?: string  } 
  | { name: 'zip_not_in', alias?: string  } 
  | { name: 'zip_lt', alias?: string  } 
  | { name: 'zip_lte', alias?: string  } 
  | { name: 'zip_gt', alias?: string  } 
  | { name: 'zip_gte', alias?: string  } 
  | { name: 'zip_contains', alias?: string  } 
  | { name: 'zip_not_contains', alias?: string  } 
  | { name: 'zip_starts_with', alias?: string  } 
  | { name: 'zip_not_starts_with', alias?: string  } 
  | { name: 'zip_ends_with', alias?: string  } 
  | { name: 'zip_not_ends_with', alias?: string  } 
  | { name: 'effectiveStartDate', alias?: string  } 
  | { name: 'effectiveStartDate_not', alias?: string  } 
  | { name: 'effectiveStartDate_in', alias?: string  } 
  | { name: 'effectiveStartDate_not_in', alias?: string  } 
  | { name: 'effectiveStartDate_lt', alias?: string  } 
  | { name: 'effectiveStartDate_lte', alias?: string  } 
  | { name: 'effectiveStartDate_gt', alias?: string  } 
  | { name: 'effectiveStartDate_gte', alias?: string  } 
  | { name: 'effectiveEndDate', alias?: string  } 
  | { name: 'effectiveEndDate_not', alias?: string  } 
  | { name: 'effectiveEndDate_in', alias?: string  } 
  | { name: 'effectiveEndDate_not_in', alias?: string  } 
  | { name: 'effectiveEndDate_lt', alias?: string  } 
  | { name: 'effectiveEndDate_lte', alias?: string  } 
  | { name: 'effectiveEndDate_gt', alias?: string  } 
  | { name: 'effectiveEndDate_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AddressUpdateManyWithWhereNestedInput {
  where?: AddressScalarWhereInput
  data?: AddressUpdateManyDataInput
}
export type AddressUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof AddressUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AddressUpdateManyDataInput {
  type?: prisma.AddressType | null
  address1?: string | null
  address2?: string | null
  city?: string | null
  state?: string | null
  country?: string | null
  zip?: string | null
  effectiveStartDate?: string | null
  effectiveEndDate?: string | null
}
export type AddressUpdateManyDataInputInputObject =
  | Extract<keyof AddressUpdateManyDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'zip', alias?: string  } 
  | { name: 'effectiveStartDate', alias?: string  } 
  | { name: 'effectiveEndDate', alias?: string  } 
  
export interface ProviderUpdateOneWithoutMembersInput {
  create?: ProviderCreateWithoutMembersInput | null
  update?: ProviderUpdateWithoutMembersDataInput | null
  upsert?: ProviderUpsertWithoutMembersInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ProviderWhereUniqueInput | null
}
export type ProviderUpdateOneWithoutMembersInputInputObject =
  | Extract<keyof ProviderUpdateOneWithoutMembersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProviderUpdateWithoutMembersDataInput {
  name?: string | null
  status?: prisma.ProviderStatus | null
}
export type ProviderUpdateWithoutMembersDataInputInputObject =
  | Extract<keyof ProviderUpdateWithoutMembersDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface ProviderUpsertWithoutMembersInput {
  update?: ProviderUpdateWithoutMembersDataInput
  create?: ProviderCreateWithoutMembersInput
}
export type ProviderUpsertWithoutMembersInputInputObject =
  | Extract<keyof ProviderUpsertWithoutMembersInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MemberUpdateManyMutationInput {
  name?: string | null
  status?: prisma.MemberStatus | null
  email?: string | null
  phone?: string | null
  birthDate?: string | null
  deathDate?: string | null
}
export type MemberUpdateManyMutationInputInputObject =
  | Extract<keyof MemberUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'deathDate', alias?: string  } 
  
export interface AddressCreateInput {
  id?: string | null
  type?: prisma.AddressType | null
  address1?: string
  address2?: string | null
  city?: string | null
  state?: string | null
  country?: string | null
  zip?: string | null
  effectiveStartDate?: string | null
  effectiveEndDate?: string | null
  member?: MemberCreateOneWithoutAddressesInput
}
export type AddressCreateInputInputObject =
  | Extract<keyof AddressCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'zip', alias?: string  } 
  | { name: 'effectiveStartDate', alias?: string  } 
  | { name: 'effectiveEndDate', alias?: string  } 
  | { name: 'member', alias?: string  } 
  
export interface MemberCreateOneWithoutAddressesInput {
  create?: MemberCreateWithoutAddressesInput | null
  connect?: MemberWhereUniqueInput | null
}
export type MemberCreateOneWithoutAddressesInputInputObject =
  | Extract<keyof MemberCreateOneWithoutAddressesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MemberCreateWithoutAddressesInput {
  id?: string | null
  name?: string
  status?: prisma.MemberStatus | null
  email?: string | null
  phone?: string | null
  pcp?: ProviderCreateOneWithoutMembersInput | null
  birthDate?: string
  deathDate?: string | null
}
export type MemberCreateWithoutAddressesInputInputObject =
  | Extract<keyof MemberCreateWithoutAddressesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'pcp', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'deathDate', alias?: string  } 
  
export interface AddressUpdateInput {
  type?: prisma.AddressType | null
  address1?: string | null
  address2?: string | null
  city?: string | null
  state?: string | null
  country?: string | null
  zip?: string | null
  effectiveStartDate?: string | null
  effectiveEndDate?: string | null
  member?: MemberUpdateOneRequiredWithoutAddressesInput | null
}
export type AddressUpdateInputInputObject =
  | Extract<keyof AddressUpdateInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'zip', alias?: string  } 
  | { name: 'effectiveStartDate', alias?: string  } 
  | { name: 'effectiveEndDate', alias?: string  } 
  | { name: 'member', alias?: string  } 
  
export interface MemberUpdateOneRequiredWithoutAddressesInput {
  create?: MemberCreateWithoutAddressesInput | null
  update?: MemberUpdateWithoutAddressesDataInput | null
  upsert?: MemberUpsertWithoutAddressesInput | null
  connect?: MemberWhereUniqueInput | null
}
export type MemberUpdateOneRequiredWithoutAddressesInputInputObject =
  | Extract<keyof MemberUpdateOneRequiredWithoutAddressesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MemberUpdateWithoutAddressesDataInput {
  name?: string | null
  status?: prisma.MemberStatus | null
  email?: string | null
  phone?: string | null
  pcp?: ProviderUpdateOneWithoutMembersInput | null
  birthDate?: string | null
  deathDate?: string | null
}
export type MemberUpdateWithoutAddressesDataInputInputObject =
  | Extract<keyof MemberUpdateWithoutAddressesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'pcp', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'deathDate', alias?: string  } 
  
export interface MemberUpsertWithoutAddressesInput {
  update?: MemberUpdateWithoutAddressesDataInput
  create?: MemberCreateWithoutAddressesInput
}
export type MemberUpsertWithoutAddressesInputInputObject =
  | Extract<keyof MemberUpsertWithoutAddressesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AddressUpdateManyMutationInput {
  type?: prisma.AddressType | null
  address1?: string | null
  address2?: string | null
  city?: string | null
  state?: string | null
  country?: string | null
  zip?: string | null
  effectiveStartDate?: string | null
  effectiveEndDate?: string | null
}
export type AddressUpdateManyMutationInputInputObject =
  | Extract<keyof AddressUpdateManyMutationInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'address1', alias?: string  } 
  | { name: 'address2', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'zip', alias?: string  } 
  | { name: 'effectiveStartDate', alias?: string  } 
  | { name: 'effectiveEndDate', alias?: string  } 
  
export interface ProviderCreateInput {
  id?: string | null
  name?: string
  status?: prisma.ProviderStatus
  members?: MemberCreateManyWithoutPcpInput | null
}
export type ProviderCreateInputInputObject =
  | Extract<keyof ProviderCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'members', alias?: string  } 
  
export interface MemberCreateManyWithoutPcpInput {
  create?: MemberCreateWithoutPcpInput[]
  connect?: MemberWhereUniqueInput[]
}
export type MemberCreateManyWithoutPcpInputInputObject =
  | Extract<keyof MemberCreateManyWithoutPcpInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MemberCreateWithoutPcpInput {
  id?: string | null
  name?: string
  addresses?: AddressCreateManyWithoutMemberInput | null
  status?: prisma.MemberStatus | null
  email?: string | null
  phone?: string | null
  birthDate?: string
  deathDate?: string | null
}
export type MemberCreateWithoutPcpInputInputObject =
  | Extract<keyof MemberCreateWithoutPcpInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'addresses', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'deathDate', alias?: string  } 
  
export interface ProviderUpdateInput {
  name?: string | null
  status?: prisma.ProviderStatus | null
  members?: MemberUpdateManyWithoutPcpInput | null
}
export type ProviderUpdateInputInputObject =
  | Extract<keyof ProviderUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'members', alias?: string  } 
  
export interface MemberUpdateManyWithoutPcpInput {
  create?: MemberCreateWithoutPcpInput[]
  delete?: MemberWhereUniqueInput[]
  connect?: MemberWhereUniqueInput[]
  set?: MemberWhereUniqueInput[]
  disconnect?: MemberWhereUniqueInput[]
  update?: MemberUpdateWithWhereUniqueWithoutPcpInput[]
  upsert?: MemberUpsertWithWhereUniqueWithoutPcpInput[]
  deleteMany?: MemberScalarWhereInput[]
  updateMany?: MemberUpdateManyWithWhereNestedInput[]
}
export type MemberUpdateManyWithoutPcpInputInputObject =
  | Extract<keyof MemberUpdateManyWithoutPcpInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface MemberUpdateWithWhereUniqueWithoutPcpInput {
  where?: MemberWhereUniqueInput
  data?: MemberUpdateWithoutPcpDataInput
}
export type MemberUpdateWithWhereUniqueWithoutPcpInputInputObject =
  | Extract<keyof MemberUpdateWithWhereUniqueWithoutPcpInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MemberUpdateWithoutPcpDataInput {
  name?: string | null
  addresses?: AddressUpdateManyWithoutMemberInput | null
  status?: prisma.MemberStatus | null
  email?: string | null
  phone?: string | null
  birthDate?: string | null
  deathDate?: string | null
}
export type MemberUpdateWithoutPcpDataInputInputObject =
  | Extract<keyof MemberUpdateWithoutPcpDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'addresses', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'deathDate', alias?: string  } 
  
export interface MemberUpsertWithWhereUniqueWithoutPcpInput {
  where?: MemberWhereUniqueInput
  update?: MemberUpdateWithoutPcpDataInput
  create?: MemberCreateWithoutPcpInput
}
export type MemberUpsertWithWhereUniqueWithoutPcpInputInputObject =
  | Extract<keyof MemberUpsertWithWhereUniqueWithoutPcpInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MemberScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  status?: prisma.MemberStatus | null
  status_not?: prisma.MemberStatus | null
  status_in?: prisma.MemberStatus[]
  status_not_in?: prisma.MemberStatus[]
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  phone?: string | null
  phone_not?: string | null
  phone_in?: string[]
  phone_not_in?: string[]
  phone_lt?: string | null
  phone_lte?: string | null
  phone_gt?: string | null
  phone_gte?: string | null
  phone_contains?: string | null
  phone_not_contains?: string | null
  phone_starts_with?: string | null
  phone_not_starts_with?: string | null
  phone_ends_with?: string | null
  phone_not_ends_with?: string | null
  birthDate?: string | null
  birthDate_not?: string | null
  birthDate_in?: string[]
  birthDate_not_in?: string[]
  birthDate_lt?: string | null
  birthDate_lte?: string | null
  birthDate_gt?: string | null
  birthDate_gte?: string | null
  deathDate?: string | null
  deathDate_not?: string | null
  deathDate_in?: string[]
  deathDate_not_in?: string[]
  deathDate_lt?: string | null
  deathDate_lte?: string | null
  deathDate_gt?: string | null
  deathDate_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: MemberScalarWhereInput[]
  OR?: MemberScalarWhereInput[]
  NOT?: MemberScalarWhereInput[]
}
export type MemberScalarWhereInputInputObject =
  | Extract<keyof MemberScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'phone_not', alias?: string  } 
  | { name: 'phone_in', alias?: string  } 
  | { name: 'phone_not_in', alias?: string  } 
  | { name: 'phone_lt', alias?: string  } 
  | { name: 'phone_lte', alias?: string  } 
  | { name: 'phone_gt', alias?: string  } 
  | { name: 'phone_gte', alias?: string  } 
  | { name: 'phone_contains', alias?: string  } 
  | { name: 'phone_not_contains', alias?: string  } 
  | { name: 'phone_starts_with', alias?: string  } 
  | { name: 'phone_not_starts_with', alias?: string  } 
  | { name: 'phone_ends_with', alias?: string  } 
  | { name: 'phone_not_ends_with', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'birthDate_not', alias?: string  } 
  | { name: 'birthDate_in', alias?: string  } 
  | { name: 'birthDate_not_in', alias?: string  } 
  | { name: 'birthDate_lt', alias?: string  } 
  | { name: 'birthDate_lte', alias?: string  } 
  | { name: 'birthDate_gt', alias?: string  } 
  | { name: 'birthDate_gte', alias?: string  } 
  | { name: 'deathDate', alias?: string  } 
  | { name: 'deathDate_not', alias?: string  } 
  | { name: 'deathDate_in', alias?: string  } 
  | { name: 'deathDate_not_in', alias?: string  } 
  | { name: 'deathDate_lt', alias?: string  } 
  | { name: 'deathDate_lte', alias?: string  } 
  | { name: 'deathDate_gt', alias?: string  } 
  | { name: 'deathDate_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MemberUpdateManyWithWhereNestedInput {
  where?: MemberScalarWhereInput
  data?: MemberUpdateManyDataInput
}
export type MemberUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof MemberUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MemberUpdateManyDataInput {
  name?: string | null
  status?: prisma.MemberStatus | null
  email?: string | null
  phone?: string | null
  birthDate?: string | null
  deathDate?: string | null
}
export type MemberUpdateManyDataInputInputObject =
  | Extract<keyof MemberUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'deathDate', alias?: string  } 
  
export interface ProviderUpdateManyMutationInput {
  name?: string | null
  status?: prisma.ProviderStatus | null
}
export type ProviderUpdateManyMutationInputInputObject =
  | Extract<keyof ProviderUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MemberSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MemberWhereInput | null
  AND?: MemberSubscriptionWhereInput[]
  OR?: MemberSubscriptionWhereInput[]
  NOT?: MemberSubscriptionWhereInput[]
}
export type MemberSubscriptionWhereInputInputObject =
  | Extract<keyof MemberSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AddressSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AddressWhereInput | null
  AND?: AddressSubscriptionWhereInput[]
  OR?: AddressSubscriptionWhereInput[]
  NOT?: AddressSubscriptionWhereInput[]
}
export type AddressSubscriptionWhereInputInputObject =
  | Extract<keyof AddressSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProviderSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProviderWhereInput | null
  AND?: ProviderSubscriptionWhereInput[]
  OR?: ProviderSubscriptionWhereInput[]
  NOT?: ProviderSubscriptionWhereInput[]
}
export type ProviderSubscriptionWhereInputInputObject =
  | Extract<keyof ProviderSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type AddressTypeValues =
  | 'MAIL'
  | 'BILLING'
  | 'EMERGENCY'
  | 'PERMANENT'
  | 'PRIMARY'
  
export type MemberStatusValues =
  | 'INVALID'
  | 'NEW'
  | 'PENDING'
  | 'ENROLLED'
  | 'DISENROLLMENT_PENDING'
  | 'DISENROLLED'
  
export type ProviderStatusValues =
  | 'INVALID'
  | 'PRACTICING'
  | 'ACTIVE'
  | 'RETIRED'
  | 'DECEASED'
  
export type AddressOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'address1_ASC'
  | 'address1_DESC'
  | 'address2_ASC'
  | 'address2_DESC'
  | 'city_ASC'
  | 'city_DESC'
  | 'state_ASC'
  | 'state_DESC'
  | 'country_ASC'
  | 'country_DESC'
  | 'zip_ASC'
  | 'zip_DESC'
  | 'effectiveStartDate_ASC'
  | 'effectiveStartDate_DESC'
  | 'effectiveEndDate_ASC'
  | 'effectiveEndDate_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MemberOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'phone_ASC'
  | 'phone_DESC'
  | 'birthDate_ASC'
  | 'birthDate_DESC'
  | 'deathDate_ASC'
  | 'deathDate_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProviderOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  